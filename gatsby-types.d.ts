/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allSanityAddress: SanityAddressConnection;
  readonly allSanityAddressArea: SanityAddressAreaConnection;
  readonly allSanityAddressStatistical: SanityAddressStatisticalConnection;
  readonly allSanityAddressStreet: SanityAddressStreetConnection;
  readonly allSanityAttribute: SanityAttributeConnection;
  readonly allSanityAttributeType: SanityAttributeTypeConnection;
  readonly allSanityBrand: SanityBrandConnection;
  readonly allSanityColor: SanityColorConnection;
  readonly allSanityContent: SanityContentConnection;
  readonly allSanityCountry: SanityCountryConnection;
  readonly allSanityDepartmentType: SanityDepartmentTypeConnection;
  readonly allSanityEntity: SanityEntityConnection;
  readonly allSanityFileAsset: SanityFileAssetConnection;
  readonly allSanityIcon: SanityIconConnection;
  readonly allSanityIdentity: SanityIdentityConnection;
  readonly allSanityImageAsset: SanityImageAssetConnection;
  readonly allSanityIndustry: SanityIndustryConnection;
  readonly allSanityLocation: SanityLocationConnection;
  readonly allSanityModel: SanityModelConnection;
  readonly allSanityNamespace: SanityNamespaceConnection;
  readonly allSanityRedirect: SanityRedirectConnection;
  readonly allSanityReview: SanityReviewConnection;
  readonly allSanityRule: SanityRuleConnection;
  readonly allSanityStaff: SanityStaffConnection;
  readonly allSanityStaffVisibilityAndPriority: SanityStaffVisibilityAndPriorityConnection;
  readonly allSanityVehicle: SanityVehicleConnection;
  readonly allSanityVoucherDisclaimer: SanityVoucherDisclaimerConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly sanityAddress: Maybe<SanityAddress>;
  readonly sanityAddressArea: Maybe<SanityAddressArea>;
  readonly sanityAddressStatistical: Maybe<SanityAddressStatistical>;
  readonly sanityAddressStreet: Maybe<SanityAddressStreet>;
  readonly sanityAttribute: Maybe<SanityAttribute>;
  readonly sanityAttributeType: Maybe<SanityAttributeType>;
  readonly sanityBrand: Maybe<SanityBrand>;
  readonly sanityColor: Maybe<SanityColor>;
  readonly sanityContent: Maybe<SanityContent>;
  readonly sanityCountry: Maybe<SanityCountry>;
  readonly sanityDepartmentType: Maybe<SanityDepartmentType>;
  readonly sanityEntity: Maybe<SanityEntity>;
  readonly sanityFileAsset: Maybe<SanityFileAsset>;
  readonly sanityIcon: Maybe<SanityIcon>;
  readonly sanityIdentity: Maybe<SanityIdentity>;
  readonly sanityImageAsset: Maybe<SanityImageAsset>;
  readonly sanityIndustry: Maybe<SanityIndustry>;
  readonly sanityLocation: Maybe<SanityLocation>;
  readonly sanityModel: Maybe<SanityModel>;
  readonly sanityNamespace: Maybe<SanityNamespace>;
  readonly sanityRedirect: Maybe<SanityRedirect>;
  readonly sanityReview: Maybe<SanityReview>;
  readonly sanityRule: Maybe<SanityRule>;
  readonly sanityStaff: Maybe<SanityStaff>;
  readonly sanityStaffVisibilityAndPriority: Maybe<SanityStaffVisibilityAndPriority>;
  readonly sanityVehicle: Maybe<SanityVehicle>;
  readonly sanityVoucherDisclaimer: Maybe<SanityVoucherDisclaimer>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allSanityAddressArgs = {
  filter: InputMaybe<SanityAddressFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityAddressSortInput>>>;
};


type Query_allSanityAddressAreaArgs = {
  filter: InputMaybe<SanityAddressAreaFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityAddressAreaSortInput>>>;
};


type Query_allSanityAddressStatisticalArgs = {
  filter: InputMaybe<SanityAddressStatisticalFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityAddressStatisticalSortInput>>>;
};


type Query_allSanityAddressStreetArgs = {
  filter: InputMaybe<SanityAddressStreetFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityAddressStreetSortInput>>>;
};


type Query_allSanityAttributeArgs = {
  filter: InputMaybe<SanityAttributeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityAttributeSortInput>>>;
};


type Query_allSanityAttributeTypeArgs = {
  filter: InputMaybe<SanityAttributeTypeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityAttributeTypeSortInput>>>;
};


type Query_allSanityBrandArgs = {
  filter: InputMaybe<SanityBrandFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityBrandSortInput>>>;
};


type Query_allSanityColorArgs = {
  filter: InputMaybe<SanityColorFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityColorSortInput>>>;
};


type Query_allSanityContentArgs = {
  filter: InputMaybe<SanityContentFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityContentSortInput>>>;
};


type Query_allSanityCountryArgs = {
  filter: InputMaybe<SanityCountryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityCountrySortInput>>>;
};


type Query_allSanityDepartmentTypeArgs = {
  filter: InputMaybe<SanityDepartmentTypeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityDepartmentTypeSortInput>>>;
};


type Query_allSanityEntityArgs = {
  filter: InputMaybe<SanityEntityFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityEntitySortInput>>>;
};


type Query_allSanityFileAssetArgs = {
  filter: InputMaybe<SanityFileAssetFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityFileAssetSortInput>>>;
};


type Query_allSanityIconArgs = {
  filter: InputMaybe<SanityIconFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityIconSortInput>>>;
};


type Query_allSanityIdentityArgs = {
  filter: InputMaybe<SanityIdentityFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityIdentitySortInput>>>;
};


type Query_allSanityImageAssetArgs = {
  filter: InputMaybe<SanityImageAssetFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityImageAssetSortInput>>>;
};


type Query_allSanityIndustryArgs = {
  filter: InputMaybe<SanityIndustryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityIndustrySortInput>>>;
};


type Query_allSanityLocationArgs = {
  filter: InputMaybe<SanityLocationFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityLocationSortInput>>>;
};


type Query_allSanityModelArgs = {
  filter: InputMaybe<SanityModelFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityModelSortInput>>>;
};


type Query_allSanityNamespaceArgs = {
  filter: InputMaybe<SanityNamespaceFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityNamespaceSortInput>>>;
};


type Query_allSanityRedirectArgs = {
  filter: InputMaybe<SanityRedirectFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityRedirectSortInput>>>;
};


type Query_allSanityReviewArgs = {
  filter: InputMaybe<SanityReviewFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityReviewSortInput>>>;
};


type Query_allSanityRuleArgs = {
  filter: InputMaybe<SanityRuleFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityRuleSortInput>>>;
};


type Query_allSanityStaffArgs = {
  filter: InputMaybe<SanityStaffFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityStaffSortInput>>>;
};


type Query_allSanityStaffVisibilityAndPriorityArgs = {
  filter: InputMaybe<SanityStaffVisibilityAndPriorityFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityStaffVisibilityAndPrioritySortInput>>>;
};


type Query_allSanityVehicleArgs = {
  filter: InputMaybe<SanityVehicleFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityVehicleSortInput>>>;
};


type Query_allSanityVoucherDisclaimerArgs = {
  filter: InputMaybe<SanityVoucherDisclaimerFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SanityVoucherDisclaimerSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_sanityAddressArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawAdminArea1: InputMaybe<JSONQueryOperatorInput>;
  _rawAdminArea2: InputMaybe<JSONQueryOperatorInput>;
  _rawAdminArea3: InputMaybe<JSONQueryOperatorInput>;
  _rawCountry: InputMaybe<JSONQueryOperatorInput>;
  _rawIdentities: InputMaybe<JSONQueryOperatorInput>;
  _rawPath: InputMaybe<JSONQueryOperatorInput>;
  _rawStatisticalAreas: InputMaybe<JSONQueryOperatorInput>;
  _rawStreetName: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  admin_area_1: InputMaybe<SanityAddressAreaFilterInput>;
  admin_area_2: InputMaybe<SanityAddressAreaFilterInput>;
  admin_area_3: InputMaybe<SanityAddressAreaFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  country: InputMaybe<SanityCountryFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  identities: InputMaybe<SanityIdentityFilterListInput>;
  internal: InputMaybe<InternalFilterInput>;
  latitude: InputMaybe<FloatQueryOperatorInput>;
  longitude: InputMaybe<FloatQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<SanitySlugFilterInput>;
  postalcode: InputMaybe<StringQueryOperatorInput>;
  prefix: InputMaybe<StringQueryOperatorInput>;
  ruralRouteNum: InputMaybe<StringQueryOperatorInput>;
  ruralRouteType: InputMaybe<StringQueryOperatorInput>;
  statistical_areas: InputMaybe<SanityAddressStatisticalFilterListInput>;
  streetDirection: InputMaybe<StringQueryOperatorInput>;
  streetName: InputMaybe<SanityAddressStreetFilterInput>;
  streetNum: InputMaybe<FloatQueryOperatorInput>;
  streetNumSuffix: InputMaybe<StringQueryOperatorInput>;
  streetType: InputMaybe<StringQueryOperatorInput>;
  suiteNum: InputMaybe<StringQueryOperatorInput>;
  suiteType: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityAddressAreaArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  _rawChildrenArea: InputMaybe<JSONQueryOperatorInput>;
  _rawCountry: InputMaybe<JSONQueryOperatorInput>;
  _rawIdentities: InputMaybe<JSONQueryOperatorInput>;
  _rawName: InputMaybe<JSONQueryOperatorInput>;
  _rawParentArea: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  abbreviation: InputMaybe<StringQueryOperatorInput>;
  brand: InputMaybe<SanityBrandFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenArea: InputMaybe<SanityAddressAreaFilterInput>;
  country: InputMaybe<SanityCountryFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  identities: InputMaybe<SanityIdentityFilterListInput>;
  internal: InputMaybe<InternalFilterInput>;
  level: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<SanityLocaleStringFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  population: InputMaybe<FloatQueryOperatorInput>;
};


type Query_sanityAddressStatisticalArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  _rawChildrenArea: InputMaybe<JSONQueryOperatorInput>;
  _rawCountry: InputMaybe<JSONQueryOperatorInput>;
  _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  _rawIdentities: InputMaybe<JSONQueryOperatorInput>;
  _rawName: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  abbreviation: InputMaybe<StringQueryOperatorInput>;
  brand: InputMaybe<SanityBrandFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenArea: InputMaybe<SanityAddressAreaFilterInput>;
  country: InputMaybe<SanityCountryFilterInput>;
  icon: InputMaybe<SanityIconFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  identities: InputMaybe<SanityIdentityFilterListInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<SanityLocaleStringFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  population: InputMaybe<FloatQueryOperatorInput>;
};


type Query_sanityAddressStreetArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawName: InputMaybe<JSONQueryOperatorInput>;
  _rawParentArea: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<SanityLocaleStringFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_sanityAttributeArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  _rawName: InputMaybe<JSONQueryOperatorInput>;
  _rawType: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  icon: InputMaybe<SanityIconFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<SanityLocaleStringFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  type: InputMaybe<SanityAttributeTypeFilterInput>;
};


type Query_sanityAttributeTypeArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  _rawName: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  icon: InputMaybe<SanityIconFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<SanityLocaleStringFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_sanityBrandArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawChild: InputMaybe<JSONQueryOperatorInput>;
  _rawLogo: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  child: InputMaybe<SanityBrandFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  logo: InputMaybe<SanityLogoFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityColorArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  touchless_id: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityContentArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawFreight: InputMaybe<JSONQueryOperatorInput>;
  _rawSlug: InputMaybe<JSONQueryOperatorInput>;
  _rawText: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  freight: InputMaybe<SanityFreightFilterListInput>;
  h1: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  no_freight: InputMaybe<StringQueryOperatorInput>;
  paragraph: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<SanitySlugFilterInput>;
  text: InputMaybe<SanityBlockFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityCountryArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawFlag: InputMaybe<JSONQueryOperatorInput>;
  _rawIdentities: InputMaybe<JSONQueryOperatorInput>;
  _rawName: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  flag: InputMaybe<SanityImageFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  identities: InputMaybe<SanityIdentityFilterListInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<SanityLocaleStringFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_sanityDepartmentTypeArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  _rawIdentities: InputMaybe<JSONQueryOperatorInput>;
  _rawIndusry: InputMaybe<JSONQueryOperatorInput>;
  _rawName: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  icon: InputMaybe<SanityIconFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  identities: InputMaybe<SanityIdentityFilterListInput>;
  indusry: InputMaybe<SanityIndustryFilterListInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<SanityLocaleStringFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_sanityEntityArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawAcronym: InputMaybe<JSONQueryOperatorInput>;
  _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  _rawChildrenEntity: InputMaybe<JSONQueryOperatorInput>;
  _rawDepartments: InputMaybe<JSONQueryOperatorInput>;
  _rawIdentity: InputMaybe<JSONQueryOperatorInput>;
  _rawName: InputMaybe<JSONQueryOperatorInput>;
  _rawParentEntity: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  acronym: InputMaybe<SanityLocaleStringFilterInput>;
  brand: InputMaybe<SanityBrandFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenEntity: InputMaybe<SanityEntityFilterListInput>;
  departments: InputMaybe<SanityDepartmentFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  identity: InputMaybe<SanityIdentityFilterListInput>;
  internal: InputMaybe<InternalFilterInput>;
  legal_name: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<SanityLocaleStringFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  parentEntity: InputMaybe<SanityEntityFilterInput>;
};


type Query_sanityFileAssetArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawSource: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  altText: InputMaybe<StringQueryOperatorInput>;
  assetId: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  label: InputMaybe<StringQueryOperatorInput>;
  mimeType: InputMaybe<StringQueryOperatorInput>;
  originalFilename: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  sha1hash: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<FloatQueryOperatorInput>;
  source: InputMaybe<SanityAssetSourceDataFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityIconArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawImage: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<SanityImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_sanityIdentityArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  _rawEntity: InputMaybe<JSONQueryOperatorInput>;
  _rawType: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  brand: InputMaybe<SanityBrandFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  type: InputMaybe<SanityNamespaceFilterInput>;
  value: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityImageAssetArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawMetadata: InputMaybe<JSONQueryOperatorInput>;
  _rawSource: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  altText: InputMaybe<StringQueryOperatorInput>;
  assetId: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  filename: InputMaybe<StringQueryOperatorInput>;
  filesize: InputMaybe<IntQueryOperatorInput>;
  gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  label: InputMaybe<StringQueryOperatorInput>;
  metadata: InputMaybe<SanityImageMetadataFilterInput>;
  mimeType: InputMaybe<StringQueryOperatorInput>;
  originalFilename: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  publicUrl: InputMaybe<StringQueryOperatorInput>;
  resize: InputMaybe<RemoteFileResizeFilterInput>;
  sha1hash: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<FloatQueryOperatorInput>;
  source: InputMaybe<SanityAssetSourceDataFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uploadId: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
};


type Query_sanityIndustryArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  _rawName: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  icon: InputMaybe<SanityIconFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isic: InputMaybe<StringQueryOperatorInput>;
  naics: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<SanityLocaleStringFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sic: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityLocationArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  _rawDepartments: InputMaybe<JSONQueryOperatorInput>;
  _rawEmployees: InputMaybe<JSONQueryOperatorInput>;
  _rawImage: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  address: InputMaybe<StringQueryOperatorInput>;
  brand: InputMaybe<SanityBrandFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  code: InputMaybe<StringQueryOperatorInput>;
  departments: InputMaybe<SanityDepartmentFilterListInput>;
  employees: InputMaybe<SanityStaffFilterListInput>;
  financeRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<SanityIconFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  locationId: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  scheduleURL: InputMaybe<StringQueryOperatorInput>;
  sellURL: InputMaybe<StringQueryOperatorInput>;
  serviceSpecialsRoute: InputMaybe<StringQueryOperatorInput>;
  visibleOnSite: InputMaybe<BooleanQueryOperatorInput>;
  website: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityModelArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  _rawImages: InputMaybe<JSONQueryOperatorInput>;
  _rawStockImages: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  brand: InputMaybe<SanityBrandFilterInput>;
  cab_type: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  colour_ext: InputMaybe<StringQueryOperatorInput>;
  colour_ext_code: InputMaybe<StringQueryOperatorInput>;
  colour_ext_hex: InputMaybe<StringQueryOperatorInput>;
  colour_int: InputMaybe<StringQueryOperatorInput>;
  colour_int_code: InputMaybe<StringQueryOperatorInput>;
  colour_int_hex: InputMaybe<StringQueryOperatorInput>;
  cylinders: InputMaybe<FloatQueryOperatorInput>;
  displacement: InputMaybe<StringQueryOperatorInput>;
  doors: InputMaybe<FloatQueryOperatorInput>;
  drivetrain: InputMaybe<StringQueryOperatorInput>;
  fuel_type: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  id_chrome: InputMaybe<StringQueryOperatorInput>;
  id_kbb_trim: InputMaybe<StringQueryOperatorInput>;
  images: InputMaybe<SanityImageFilterListInput>;
  internal: InputMaybe<InternalFilterInput>;
  make: InputMaybe<StringQueryOperatorInput>;
  model: InputMaybe<StringQueryOperatorInput>;
  model_trim: InputMaybe<StringQueryOperatorInput>;
  mpg_city: InputMaybe<FloatQueryOperatorInput>;
  mpg_highway: InputMaybe<FloatQueryOperatorInput>;
  oem_code: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  per_litre_city: InputMaybe<FloatQueryOperatorInput>;
  per_litre_hwy: InputMaybe<FloatQueryOperatorInput>;
  stock_images: InputMaybe<SanityImageFilterListInput>;
  transmission: InputMaybe<StringQueryOperatorInput>;
  trim_detail: InputMaybe<StringQueryOperatorInput>;
  vins: InputMaybe<StringQueryOperatorInput>;
  year: InputMaybe<FloatQueryOperatorInput>;
};


type Query_sanityNamespaceArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  _rawEntity: InputMaybe<JSONQueryOperatorInput>;
  _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  _rawName: InputMaybe<JSONQueryOperatorInput>;
  _rawNameFull: InputMaybe<JSONQueryOperatorInput>;
  _rawSupplier: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  brand: InputMaybe<SanityBrandFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  code: InputMaybe<StringQueryOperatorInput>;
  entity: InputMaybe<SanityEntityFilterInput>;
  icon: InputMaybe<SanityIconFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<SanityLocaleStringFilterInput>;
  name_full: InputMaybe<SanityLocaleStringFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  supplier: InputMaybe<SanityEntityFilterInput>;
  touchless_id: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityRedirectArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  force: InputMaybe<BooleanQueryOperatorInput>;
  from: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  permanent: InputMaybe<BooleanQueryOperatorInput>;
  status_code: InputMaybe<StringQueryOperatorInput>;
  to: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityReviewArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawAvatar: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  avatar: InputMaybe<SanityImageFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  comment: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  location_id: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  published_at: InputMaybe<DateQueryOperatorInput>;
  publisher_id: InputMaybe<StringQueryOperatorInput>;
  rating: InputMaybe<FloatQueryOperatorInput>;
  status: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityRuleArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  type: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityStaffArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawImage: InputMaybe<JSONQueryOperatorInput>;
  _rawLanguages: InputMaybe<JSONQueryOperatorInput>;
  _rawLocation: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  companyCode: InputMaybe<StringQueryOperatorInput>;
  companyId: InputMaybe<StringQueryOperatorInput>;
  departmentCode: InputMaybe<StringQueryOperatorInput>;
  departmentName: InputMaybe<StringQueryOperatorInput>;
  dreamCar: InputMaybe<StringQueryOperatorInput>;
  employeeId: InputMaybe<StringQueryOperatorInput>;
  favFood: InputMaybe<StringQueryOperatorInput>;
  favMusic: InputMaybe<StringQueryOperatorInput>;
  favShow: InputMaybe<StringQueryOperatorInput>;
  firstCar: InputMaybe<StringQueryOperatorInput>;
  firstName: InputMaybe<StringQueryOperatorInput>;
  gender: InputMaybe<StringQueryOperatorInput>;
  homeTown: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<SanityImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  jobDescription: InputMaybe<StringQueryOperatorInput>;
  languages: InputMaybe<SanityTagFilterListInput>;
  lastBook: InputMaybe<StringQueryOperatorInput>;
  lastName: InputMaybe<StringQueryOperatorInput>;
  location: InputMaybe<SanityLocationFilterInput>;
  locationCode: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  personalEmail: InputMaybe<StringQueryOperatorInput>;
  personalPhoneNumber: InputMaybe<StringQueryOperatorInput>;
  photoURL: InputMaybe<StringQueryOperatorInput>;
  pineappleOnPizza: InputMaybe<BooleanQueryOperatorInput>;
  placeToTravel: InputMaybe<StringQueryOperatorInput>;
  preferredName: InputMaybe<StringQueryOperatorInput>;
  shirtSize: InputMaybe<StringQueryOperatorInput>;
  visibleOnSite: InputMaybe<BooleanQueryOperatorInput>;
  workEmail: InputMaybe<StringQueryOperatorInput>;
  workPhoneNumber: InputMaybe<StringQueryOperatorInput>;
};


type Query_sanityStaffVisibilityAndPriorityArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawCorporateVisibilityPriority: InputMaybe<JSONQueryOperatorInput>;
  _rawVisibilityPriority: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  corporate_visibility_priority: InputMaybe<SanityStaffVisibilityPopupFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  visibility_priority: InputMaybe<SanityStaffVisibilityPopupFilterListInput>;
};


type Query_sanityVehicleArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawAttributes: InputMaybe<JSONQueryOperatorInput>;
  _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  _rawBrandAudio: InputMaybe<JSONQueryOperatorInput>;
  _rawBrandTrim: InputMaybe<JSONQueryOperatorInput>;
  _rawFeatures: InputMaybe<JSONQueryOperatorInput>;
  _rawImages: InputMaybe<JSONQueryOperatorInput>;
  _rawLocation: InputMaybe<JSONQueryOperatorInput>;
  _rawModelOverride: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  attributes: InputMaybe<SanityAttributeFilterListInput>;
  body: InputMaybe<StringQueryOperatorInput>;
  brand: InputMaybe<SanityBrandFilterInput>;
  brand_audio: InputMaybe<SanityBrandFilterInput>;
  brand_trim: InputMaybe<SanityBrandFilterInput>;
  cab_type: InputMaybe<StringQueryOperatorInput>;
  cdn_images_array: InputMaybe<StringQueryOperatorInput>;
  certification: InputMaybe<StringQueryOperatorInput>;
  certified: InputMaybe<BooleanQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  colour_ext: InputMaybe<StringQueryOperatorInput>;
  colour_ext_code: InputMaybe<StringQueryOperatorInput>;
  colour_ext_hex: InputMaybe<StringQueryOperatorInput>;
  colour_ext_original: InputMaybe<StringQueryOperatorInput>;
  colour_int: InputMaybe<StringQueryOperatorInput>;
  colour_int_code: InputMaybe<StringQueryOperatorInput>;
  colour_int_hex: InputMaybe<StringQueryOperatorInput>;
  colour_int_original: InputMaybe<StringQueryOperatorInput>;
  cylinders: InputMaybe<FloatQueryOperatorInput>;
  date_added: InputMaybe<DateQueryOperatorInput>;
  date_on_lot: InputMaybe<StringQueryOperatorInput>;
  date_updated: InputMaybe<DateQueryOperatorInput>;
  displacement: InputMaybe<StringQueryOperatorInput>;
  doors: InputMaybe<FloatQueryOperatorInput>;
  drivetrain: InputMaybe<StringQueryOperatorInput>;
  features: InputMaybe<SanityFeatureFilterListInput>;
  fuel_type: InputMaybe<StringQueryOperatorInput>;
  had_one_owner: InputMaybe<BooleanQueryOperatorInput>;
  has_android_auto: InputMaybe<BooleanQueryOperatorInput>;
  has_apple_carplay: InputMaybe<BooleanQueryOperatorInput>;
  has_awd: InputMaybe<BooleanQueryOperatorInput>;
  has_backup_camera: InputMaybe<BooleanQueryOperatorInput>;
  has_blind_spot_monitor: InputMaybe<BooleanQueryOperatorInput>;
  has_bluetooth: InputMaybe<BooleanQueryOperatorInput>;
  has_cloth_seats: InputMaybe<BooleanQueryOperatorInput>;
  has_cooled_seats: InputMaybe<BooleanQueryOperatorInput>;
  has_cross_traffic_detect: InputMaybe<BooleanQueryOperatorInput>;
  has_cruise_control: InputMaybe<BooleanQueryOperatorInput>;
  has_fog_lights: InputMaybe<BooleanQueryOperatorInput>;
  has_folding_seats: InputMaybe<BooleanQueryOperatorInput>;
  has_handsfree_liftgate: InputMaybe<BooleanQueryOperatorInput>;
  has_heated_rear_seats: InputMaybe<BooleanQueryOperatorInput>;
  has_heated_seats: InputMaybe<BooleanQueryOperatorInput>;
  has_heated_steering: InputMaybe<BooleanQueryOperatorInput>;
  has_images: InputMaybe<BooleanQueryOperatorInput>;
  has_keyless_entry: InputMaybe<BooleanQueryOperatorInput>;
  has_lane_assist: InputMaybe<BooleanQueryOperatorInput>;
  has_leather_seats: InputMaybe<BooleanQueryOperatorInput>;
  has_luxury_package: InputMaybe<BooleanQueryOperatorInput>;
  has_massage: InputMaybe<BooleanQueryOperatorInput>;
  has_memory_seats: InputMaybe<BooleanQueryOperatorInput>;
  has_moonroof: InputMaybe<BooleanQueryOperatorInput>;
  has_navigation: InputMaybe<BooleanQueryOperatorInput>;
  has_panoramic_roof: InputMaybe<BooleanQueryOperatorInput>;
  has_power_seats: InputMaybe<BooleanQueryOperatorInput>;
  has_pre_collision: InputMaybe<BooleanQueryOperatorInput>;
  has_premium_audio: InputMaybe<BooleanQueryOperatorInput>;
  has_premium_package: InputMaybe<BooleanQueryOperatorInput>;
  has_push_start: InputMaybe<BooleanQueryOperatorInput>;
  has_rain_wipers: InputMaybe<BooleanQueryOperatorInput>;
  has_rear_ac: InputMaybe<BooleanQueryOperatorInput>;
  has_roof_crossbars: InputMaybe<BooleanQueryOperatorInput>;
  has_roof_racks: InputMaybe<BooleanQueryOperatorInput>;
  has_roof_rails: InputMaybe<BooleanQueryOperatorInput>;
  has_satellite_radio: InputMaybe<BooleanQueryOperatorInput>;
  has_self_driving: InputMaybe<BooleanQueryOperatorInput>;
  has_spare_tire: InputMaybe<BooleanQueryOperatorInput>;
  has_sport_package: InputMaybe<BooleanQueryOperatorInput>;
  has_sunroof: InputMaybe<BooleanQueryOperatorInput>;
  has_tech_package: InputMaybe<BooleanQueryOperatorInput>;
  has_tow_package: InputMaybe<BooleanQueryOperatorInput>;
  has_traction_control: InputMaybe<BooleanQueryOperatorInput>;
  has_ultimate_package: InputMaybe<BooleanQueryOperatorInput>;
  has_usb: InputMaybe<BooleanQueryOperatorInput>;
  has_usbc: InputMaybe<BooleanQueryOperatorInput>;
  has_vdp: InputMaybe<BooleanQueryOperatorInput>;
  has_wifi_hotspot: InputMaybe<BooleanQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image_count: InputMaybe<FloatQueryOperatorInput>;
  images: InputMaybe<SanityImageFilterListInput>;
  images_array: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  is_delivered: InputMaybe<BooleanQueryOperatorInput>;
  is_diesel: InputMaybe<BooleanQueryOperatorInput>;
  is_electric: InputMaybe<BooleanQueryOperatorInput>;
  is_gasoline: InputMaybe<BooleanQueryOperatorInput>;
  is_hidden: InputMaybe<BooleanQueryOperatorInput>;
  is_hybrid: InputMaybe<BooleanQueryOperatorInput>;
  is_image_transformed: InputMaybe<BooleanQueryOperatorInput>;
  is_in_active_deal: InputMaybe<BooleanQueryOperatorInput>;
  is_in_transit: InputMaybe<BooleanQueryOperatorInput>;
  is_inspected: InputMaybe<BooleanQueryOperatorInput>;
  is_loaded: InputMaybe<BooleanQueryOperatorInput>;
  is_low_mileage: InputMaybe<BooleanQueryOperatorInput>;
  is_low_mileage_per_year: InputMaybe<BooleanQueryOperatorInput>;
  is_new_arrival: InputMaybe<BooleanQueryOperatorInput>;
  is_on_hand: InputMaybe<BooleanQueryOperatorInput>;
  is_out_for_delivery: InputMaybe<BooleanQueryOperatorInput>;
  is_reserved: InputMaybe<BooleanQueryOperatorInput>;
  is_safety_pick: InputMaybe<BooleanQueryOperatorInput>;
  is_sold: InputMaybe<BooleanQueryOperatorInput>;
  is_titled: InputMaybe<BooleanQueryOperatorInput>;
  is_transferred: InputMaybe<BooleanQueryOperatorInput>;
  is_ulev: InputMaybe<BooleanQueryOperatorInput>;
  latest_day_on_lot: InputMaybe<StringQueryOperatorInput>;
  listing: InputMaybe<StringQueryOperatorInput>;
  listing_type: InputMaybe<StringQueryOperatorInput>;
  location: InputMaybe<SanityLocationFilterInput>;
  make: InputMaybe<StringQueryOperatorInput>;
  metadata: InputMaybe<StringQueryOperatorInput>;
  model: InputMaybe<StringQueryOperatorInput>;
  model_override: InputMaybe<SanityModelFilterInput>;
  mpg_city: InputMaybe<FloatQueryOperatorInput>;
  mpg_highway: InputMaybe<FloatQueryOperatorInput>;
  odometer_km: InputMaybe<FloatQueryOperatorInput>;
  odometer_mi: InputMaybe<FloatQueryOperatorInput>;
  oem_code: InputMaybe<StringQueryOperatorInput>;
  option_codes: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  per_litre_city: InputMaybe<FloatQueryOperatorInput>;
  per_litre_hwy: InputMaybe<FloatQueryOperatorInput>;
  price: InputMaybe<FloatQueryOperatorInput>;
  price_bottom: InputMaybe<FloatQueryOperatorInput>;
  price_msrp: InputMaybe<FloatQueryOperatorInput>;
  price_other: InputMaybe<FloatQueryOperatorInput>;
  price_rebates_guaranteed: InputMaybe<FloatQueryOperatorInput>;
  price_rebates_optional: InputMaybe<FloatQueryOperatorInput>;
  price_rebates_total: InputMaybe<FloatQueryOperatorInput>;
  price_wholesale: InputMaybe<FloatQueryOperatorInput>;
  sold_in_days: InputMaybe<StringQueryOperatorInput>;
  stock_images: InputMaybe<StringQueryOperatorInput>;
  stock_number: InputMaybe<StringQueryOperatorInput>;
  transmission: InputMaybe<StringQueryOperatorInput>;
  trim: InputMaybe<StringQueryOperatorInput>;
  trim_detail: InputMaybe<StringQueryOperatorInput>;
  vauto_description: InputMaybe<StringQueryOperatorInput>;
  vauto_features: InputMaybe<StringQueryOperatorInput>;
  vauto_photos: InputMaybe<StringQueryOperatorInput>;
  vauto_rooftop: InputMaybe<StringQueryOperatorInput>;
  vauto_tags: InputMaybe<StringQueryOperatorInput>;
  vauto_vdp_url: InputMaybe<StringQueryOperatorInput>;
  vin: InputMaybe<StringQueryOperatorInput>;
  year: InputMaybe<FloatQueryOperatorInput>;
};


type Query_sanityVoucherDisclaimerArgs = {
  _createdAt: InputMaybe<DateQueryOperatorInput>;
  _id: InputMaybe<StringQueryOperatorInput>;
  _key: InputMaybe<StringQueryOperatorInput>;
  _rawDisclaimer: InputMaybe<JSONQueryOperatorInput>;
  _rev: InputMaybe<StringQueryOperatorInput>;
  _type: InputMaybe<StringQueryOperatorInput>;
  _updatedAt: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  disclaimer: InputMaybe<SanityBlockFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  flags: InputMaybe<SiteFlagsFilterInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

/** Remote Interface */
type RemoteFile = {
  readonly filename: Scalars['String'];
  readonly filesize: Maybe<Scalars['Int']>;
  /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
  readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly mimeType: Scalars['String'];
  readonly publicUrl: Scalars['String'];
  readonly resize: Maybe<RemoteFileResize>;
  readonly width: Maybe<Scalars['Int']>;
};


/** Remote Interface */
type RemoteFile_gatsbyImageArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
  height: InputMaybe<Scalars['Int']>;
  layout?: InputMaybe<RemoteFileLayout>;
  outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<RemoteFilePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


/** Remote Interface */
type RemoteFile_resizeArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  format?: InputMaybe<RemoteFileFormat>;
  height: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type RemoteFileCropFocus =
  | 'bottom'
  | 'center'
  | 'edges'
  | 'entropy'
  | 'faces'
  | 'left'
  | 'right'
  | 'top';

type RemoteFileFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'outside';

type RemoteFileFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | 'png'
  | 'webp';

type RemoteFileLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type RemoteFilePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type RemoteFileResize = {
  readonly height: Maybe<Scalars['Int']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type RemoteFileResizeFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type RemoteFileResizeFilterInput = {
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type RemoteFileResizeSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type SanityAccordion = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly body: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SanityAddress = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawAdminArea1: Maybe<Scalars['JSON']>;
  readonly _rawAdminArea2: Maybe<Scalars['JSON']>;
  readonly _rawAdminArea3: Maybe<Scalars['JSON']>;
  readonly _rawCountry: Maybe<Scalars['JSON']>;
  readonly _rawIdentities: Maybe<Scalars['JSON']>;
  readonly _rawPath: Maybe<Scalars['JSON']>;
  readonly _rawStatisticalAreas: Maybe<Scalars['JSON']>;
  readonly _rawStreetName: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly admin_area_1: Maybe<SanityAddressArea>;
  readonly admin_area_2: Maybe<SanityAddressArea>;
  readonly admin_area_3: Maybe<SanityAddressArea>;
  readonly children: ReadonlyArray<Node>;
  readonly country: Maybe<SanityCountry>;
  readonly id: Scalars['ID'];
  readonly identities: Maybe<ReadonlyArray<Maybe<SanityIdentity>>>;
  readonly internal: Internal;
  readonly latitude: Maybe<Scalars['Float']>;
  readonly longitude: Maybe<Scalars['Float']>;
  readonly parent: Maybe<Node>;
  readonly path: Maybe<SanitySlug>;
  readonly postalcode: Maybe<Scalars['String']>;
  readonly prefix: Maybe<Scalars['String']>;
  readonly ruralRouteNum: Maybe<Scalars['String']>;
  readonly ruralRouteType: Maybe<Scalars['String']>;
  readonly statistical_areas: Maybe<ReadonlyArray<Maybe<SanityAddressStatistical>>>;
  readonly streetDirection: Maybe<Scalars['String']>;
  readonly streetName: Maybe<SanityAddressStreet>;
  readonly streetNum: Maybe<Scalars['Float']>;
  readonly streetNumSuffix: Maybe<Scalars['String']>;
  readonly streetType: Maybe<Scalars['String']>;
  readonly suiteNum: Maybe<Scalars['String']>;
  readonly suiteType: Maybe<Scalars['String']>;
};


type SanityAddress__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityAddress__rawAdminArea1Args = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddress__rawAdminArea2Args = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddress__rawAdminArea3Args = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddress__rawCountryArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddress__rawIdentitiesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddress__rawPathArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddress__rawStatisticalAreasArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddress__rawStreetNameArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddress__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityAddressArea = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawBrand: Maybe<Scalars['JSON']>;
  readonly _rawChildrenArea: Maybe<Scalars['JSON']>;
  readonly _rawCountry: Maybe<Scalars['JSON']>;
  readonly _rawIdentities: Maybe<Scalars['JSON']>;
  readonly _rawName: Maybe<Scalars['JSON']>;
  readonly _rawParentArea: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly abbreviation: Maybe<Scalars['String']>;
  readonly brand: Maybe<SanityBrand>;
  readonly children: ReadonlyArray<Node>;
  readonly childrenArea: Maybe<SanityAddressArea>;
  readonly country: Maybe<SanityCountry>;
  readonly id: Scalars['ID'];
  readonly identities: Maybe<ReadonlyArray<Maybe<SanityIdentity>>>;
  readonly internal: Internal;
  readonly level: Maybe<Scalars['Float']>;
  readonly name: Maybe<SanityLocaleString>;
  readonly parent: Maybe<Node>;
  readonly parentArea: Maybe<SanityAddressAreaOrCountry>;
  readonly population: Maybe<Scalars['Float']>;
};


type SanityAddressArea__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityAddressArea__rawBrandArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressArea__rawChildrenAreaArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressArea__rawCountryArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressArea__rawIdentitiesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressArea__rawNameArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressArea__rawParentAreaArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressArea__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityAddressAreaConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityAddressAreaEdge>;
  readonly group: ReadonlyArray<SanityAddressAreaGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityAddressArea>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityAddressAreaConnection_distinctArgs = {
  field: SanityAddressAreaFieldSelector;
};


type SanityAddressAreaConnection_groupArgs = {
  field: SanityAddressAreaFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityAddressAreaConnection_maxArgs = {
  field: SanityAddressAreaFieldSelector;
};


type SanityAddressAreaConnection_minArgs = {
  field: SanityAddressAreaFieldSelector;
};


type SanityAddressAreaConnection_sumArgs = {
  field: SanityAddressAreaFieldSelector;
};

type SanityAddressAreaEdge = {
  readonly next: Maybe<SanityAddressArea>;
  readonly node: SanityAddressArea;
  readonly previous: Maybe<SanityAddressArea>;
};

type SanityAddressAreaFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawBrand: InputMaybe<FieldSelectorEnum>;
  readonly _rawChildrenArea: InputMaybe<FieldSelectorEnum>;
  readonly _rawCountry: InputMaybe<FieldSelectorEnum>;
  readonly _rawIdentities: InputMaybe<FieldSelectorEnum>;
  readonly _rawName: InputMaybe<FieldSelectorEnum>;
  readonly _rawParentArea: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly abbreviation: InputMaybe<FieldSelectorEnum>;
  readonly brand: InputMaybe<SanityBrandFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenArea: InputMaybe<SanityAddressAreaFieldSelector>;
  readonly country: InputMaybe<SanityCountryFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly identities: InputMaybe<SanityIdentityFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly level: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<SanityLocaleStringFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly population: InputMaybe<FieldSelectorEnum>;
};

type SanityAddressAreaFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawChildrenArea: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawCountry: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawIdentities: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawName: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawParentArea: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly abbreviation: InputMaybe<StringQueryOperatorInput>;
  readonly brand: InputMaybe<SanityBrandFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenArea: InputMaybe<SanityAddressAreaFilterInput>;
  readonly country: InputMaybe<SanityCountryFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly identities: InputMaybe<SanityIdentityFilterListInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly level: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<SanityLocaleStringFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly population: InputMaybe<FloatQueryOperatorInput>;
};

type SanityAddressAreaGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityAddressAreaEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityAddressAreaGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityAddressArea>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityAddressAreaGroupConnection_distinctArgs = {
  field: SanityAddressAreaFieldSelector;
};


type SanityAddressAreaGroupConnection_groupArgs = {
  field: SanityAddressAreaFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityAddressAreaGroupConnection_maxArgs = {
  field: SanityAddressAreaFieldSelector;
};


type SanityAddressAreaGroupConnection_minArgs = {
  field: SanityAddressAreaFieldSelector;
};


type SanityAddressAreaGroupConnection_sumArgs = {
  field: SanityAddressAreaFieldSelector;
};

type SanityAddressAreaOrCountry = SanityAddressArea | SanityCountry;

type SanityAddressAreaSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawBrand: InputMaybe<SortOrderEnum>;
  readonly _rawChildrenArea: InputMaybe<SortOrderEnum>;
  readonly _rawCountry: InputMaybe<SortOrderEnum>;
  readonly _rawIdentities: InputMaybe<SortOrderEnum>;
  readonly _rawName: InputMaybe<SortOrderEnum>;
  readonly _rawParentArea: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly abbreviation: InputMaybe<SortOrderEnum>;
  readonly brand: InputMaybe<SanityBrandSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenArea: InputMaybe<SanityAddressAreaSortInput>;
  readonly country: InputMaybe<SanityCountrySortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly identities: InputMaybe<SanityIdentitySortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly level: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SanityLocaleStringSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly population: InputMaybe<SortOrderEnum>;
};

type SanityAddressConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityAddressEdge>;
  readonly group: ReadonlyArray<SanityAddressGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityAddress>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityAddressConnection_distinctArgs = {
  field: SanityAddressFieldSelector;
};


type SanityAddressConnection_groupArgs = {
  field: SanityAddressFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityAddressConnection_maxArgs = {
  field: SanityAddressFieldSelector;
};


type SanityAddressConnection_minArgs = {
  field: SanityAddressFieldSelector;
};


type SanityAddressConnection_sumArgs = {
  field: SanityAddressFieldSelector;
};

type SanityAddressEdge = {
  readonly next: Maybe<SanityAddress>;
  readonly node: SanityAddress;
  readonly previous: Maybe<SanityAddress>;
};

type SanityAddressFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawAdminArea1: InputMaybe<FieldSelectorEnum>;
  readonly _rawAdminArea2: InputMaybe<FieldSelectorEnum>;
  readonly _rawAdminArea3: InputMaybe<FieldSelectorEnum>;
  readonly _rawCountry: InputMaybe<FieldSelectorEnum>;
  readonly _rawIdentities: InputMaybe<FieldSelectorEnum>;
  readonly _rawPath: InputMaybe<FieldSelectorEnum>;
  readonly _rawStatisticalAreas: InputMaybe<FieldSelectorEnum>;
  readonly _rawStreetName: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly admin_area_1: InputMaybe<SanityAddressAreaFieldSelector>;
  readonly admin_area_2: InputMaybe<SanityAddressAreaFieldSelector>;
  readonly admin_area_3: InputMaybe<SanityAddressAreaFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly country: InputMaybe<SanityCountryFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly identities: InputMaybe<SanityIdentityFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly latitude: InputMaybe<FieldSelectorEnum>;
  readonly longitude: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<SanitySlugFieldSelector>;
  readonly postalcode: InputMaybe<FieldSelectorEnum>;
  readonly prefix: InputMaybe<FieldSelectorEnum>;
  readonly ruralRouteNum: InputMaybe<FieldSelectorEnum>;
  readonly ruralRouteType: InputMaybe<FieldSelectorEnum>;
  readonly statistical_areas: InputMaybe<SanityAddressStatisticalFieldSelector>;
  readonly streetDirection: InputMaybe<FieldSelectorEnum>;
  readonly streetName: InputMaybe<SanityAddressStreetFieldSelector>;
  readonly streetNum: InputMaybe<FieldSelectorEnum>;
  readonly streetNumSuffix: InputMaybe<FieldSelectorEnum>;
  readonly streetType: InputMaybe<FieldSelectorEnum>;
  readonly suiteNum: InputMaybe<FieldSelectorEnum>;
  readonly suiteType: InputMaybe<FieldSelectorEnum>;
};

type SanityAddressFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawAdminArea1: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawAdminArea2: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawAdminArea3: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawCountry: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawIdentities: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawPath: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawStatisticalAreas: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawStreetName: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly admin_area_1: InputMaybe<SanityAddressAreaFilterInput>;
  readonly admin_area_2: InputMaybe<SanityAddressAreaFilterInput>;
  readonly admin_area_3: InputMaybe<SanityAddressAreaFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly country: InputMaybe<SanityCountryFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly identities: InputMaybe<SanityIdentityFilterListInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly latitude: InputMaybe<FloatQueryOperatorInput>;
  readonly longitude: InputMaybe<FloatQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<SanitySlugFilterInput>;
  readonly postalcode: InputMaybe<StringQueryOperatorInput>;
  readonly prefix: InputMaybe<StringQueryOperatorInput>;
  readonly ruralRouteNum: InputMaybe<StringQueryOperatorInput>;
  readonly ruralRouteType: InputMaybe<StringQueryOperatorInput>;
  readonly statistical_areas: InputMaybe<SanityAddressStatisticalFilterListInput>;
  readonly streetDirection: InputMaybe<StringQueryOperatorInput>;
  readonly streetName: InputMaybe<SanityAddressStreetFilterInput>;
  readonly streetNum: InputMaybe<FloatQueryOperatorInput>;
  readonly streetNumSuffix: InputMaybe<StringQueryOperatorInput>;
  readonly streetType: InputMaybe<StringQueryOperatorInput>;
  readonly suiteNum: InputMaybe<StringQueryOperatorInput>;
  readonly suiteType: InputMaybe<StringQueryOperatorInput>;
};

type SanityAddressGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityAddressEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityAddressGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityAddress>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityAddressGroupConnection_distinctArgs = {
  field: SanityAddressFieldSelector;
};


type SanityAddressGroupConnection_groupArgs = {
  field: SanityAddressFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityAddressGroupConnection_maxArgs = {
  field: SanityAddressFieldSelector;
};


type SanityAddressGroupConnection_minArgs = {
  field: SanityAddressFieldSelector;
};


type SanityAddressGroupConnection_sumArgs = {
  field: SanityAddressFieldSelector;
};

type SanityAddressOrCountryOrDepartmentOrEntityOrLocation = SanityAddress | SanityCountry | SanityDepartment | SanityEntity | SanityLocation;

type SanityAddressSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawAdminArea1: InputMaybe<SortOrderEnum>;
  readonly _rawAdminArea2: InputMaybe<SortOrderEnum>;
  readonly _rawAdminArea3: InputMaybe<SortOrderEnum>;
  readonly _rawCountry: InputMaybe<SortOrderEnum>;
  readonly _rawIdentities: InputMaybe<SortOrderEnum>;
  readonly _rawPath: InputMaybe<SortOrderEnum>;
  readonly _rawStatisticalAreas: InputMaybe<SortOrderEnum>;
  readonly _rawStreetName: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly admin_area_1: InputMaybe<SanityAddressAreaSortInput>;
  readonly admin_area_2: InputMaybe<SanityAddressAreaSortInput>;
  readonly admin_area_3: InputMaybe<SanityAddressAreaSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly country: InputMaybe<SanityCountrySortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly identities: InputMaybe<SanityIdentitySortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly latitude: InputMaybe<SortOrderEnum>;
  readonly longitude: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SanitySlugSortInput>;
  readonly postalcode: InputMaybe<SortOrderEnum>;
  readonly prefix: InputMaybe<SortOrderEnum>;
  readonly ruralRouteNum: InputMaybe<SortOrderEnum>;
  readonly ruralRouteType: InputMaybe<SortOrderEnum>;
  readonly statistical_areas: InputMaybe<SanityAddressStatisticalSortInput>;
  readonly streetDirection: InputMaybe<SortOrderEnum>;
  readonly streetName: InputMaybe<SanityAddressStreetSortInput>;
  readonly streetNum: InputMaybe<SortOrderEnum>;
  readonly streetNumSuffix: InputMaybe<SortOrderEnum>;
  readonly streetType: InputMaybe<SortOrderEnum>;
  readonly suiteNum: InputMaybe<SortOrderEnum>;
  readonly suiteType: InputMaybe<SortOrderEnum>;
};

type SanityAddressStatistical = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawBrand: Maybe<Scalars['JSON']>;
  readonly _rawChildrenArea: Maybe<Scalars['JSON']>;
  readonly _rawCountry: Maybe<Scalars['JSON']>;
  readonly _rawIcon: Maybe<Scalars['JSON']>;
  readonly _rawIdentities: Maybe<Scalars['JSON']>;
  readonly _rawName: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly abbreviation: Maybe<Scalars['String']>;
  readonly brand: Maybe<SanityBrand>;
  readonly children: ReadonlyArray<Node>;
  readonly childrenArea: Maybe<SanityAddressArea>;
  readonly country: Maybe<SanityCountry>;
  readonly icon: Maybe<SanityIcon>;
  readonly id: Scalars['ID'];
  readonly identities: Maybe<ReadonlyArray<Maybe<SanityIdentity>>>;
  readonly internal: Internal;
  readonly name: Maybe<SanityLocaleString>;
  readonly parent: Maybe<Node>;
  readonly population: Maybe<Scalars['Float']>;
};


type SanityAddressStatistical__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityAddressStatistical__rawBrandArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressStatistical__rawChildrenAreaArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressStatistical__rawCountryArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressStatistical__rawIconArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressStatistical__rawIdentitiesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressStatistical__rawNameArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressStatistical__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityAddressStatisticalConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityAddressStatisticalEdge>;
  readonly group: ReadonlyArray<SanityAddressStatisticalGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityAddressStatistical>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityAddressStatisticalConnection_distinctArgs = {
  field: SanityAddressStatisticalFieldSelector;
};


type SanityAddressStatisticalConnection_groupArgs = {
  field: SanityAddressStatisticalFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityAddressStatisticalConnection_maxArgs = {
  field: SanityAddressStatisticalFieldSelector;
};


type SanityAddressStatisticalConnection_minArgs = {
  field: SanityAddressStatisticalFieldSelector;
};


type SanityAddressStatisticalConnection_sumArgs = {
  field: SanityAddressStatisticalFieldSelector;
};

type SanityAddressStatisticalEdge = {
  readonly next: Maybe<SanityAddressStatistical>;
  readonly node: SanityAddressStatistical;
  readonly previous: Maybe<SanityAddressStatistical>;
};

type SanityAddressStatisticalFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawBrand: InputMaybe<FieldSelectorEnum>;
  readonly _rawChildrenArea: InputMaybe<FieldSelectorEnum>;
  readonly _rawCountry: InputMaybe<FieldSelectorEnum>;
  readonly _rawIcon: InputMaybe<FieldSelectorEnum>;
  readonly _rawIdentities: InputMaybe<FieldSelectorEnum>;
  readonly _rawName: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly abbreviation: InputMaybe<FieldSelectorEnum>;
  readonly brand: InputMaybe<SanityBrandFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenArea: InputMaybe<SanityAddressAreaFieldSelector>;
  readonly country: InputMaybe<SanityCountryFieldSelector>;
  readonly icon: InputMaybe<SanityIconFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly identities: InputMaybe<SanityIdentityFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<SanityLocaleStringFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly population: InputMaybe<FieldSelectorEnum>;
};

type SanityAddressStatisticalFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawChildrenArea: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawCountry: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawIdentities: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawName: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly abbreviation: InputMaybe<StringQueryOperatorInput>;
  readonly brand: InputMaybe<SanityBrandFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenArea: InputMaybe<SanityAddressAreaFilterInput>;
  readonly country: InputMaybe<SanityCountryFilterInput>;
  readonly icon: InputMaybe<SanityIconFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly identities: InputMaybe<SanityIdentityFilterListInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<SanityLocaleStringFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly population: InputMaybe<FloatQueryOperatorInput>;
};

type SanityAddressStatisticalFilterListInput = {
  readonly elemMatch: InputMaybe<SanityAddressStatisticalFilterInput>;
};

type SanityAddressStatisticalGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityAddressStatisticalEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityAddressStatisticalGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityAddressStatistical>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityAddressStatisticalGroupConnection_distinctArgs = {
  field: SanityAddressStatisticalFieldSelector;
};


type SanityAddressStatisticalGroupConnection_groupArgs = {
  field: SanityAddressStatisticalFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityAddressStatisticalGroupConnection_maxArgs = {
  field: SanityAddressStatisticalFieldSelector;
};


type SanityAddressStatisticalGroupConnection_minArgs = {
  field: SanityAddressStatisticalFieldSelector;
};


type SanityAddressStatisticalGroupConnection_sumArgs = {
  field: SanityAddressStatisticalFieldSelector;
};

type SanityAddressStatisticalSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawBrand: InputMaybe<SortOrderEnum>;
  readonly _rawChildrenArea: InputMaybe<SortOrderEnum>;
  readonly _rawCountry: InputMaybe<SortOrderEnum>;
  readonly _rawIcon: InputMaybe<SortOrderEnum>;
  readonly _rawIdentities: InputMaybe<SortOrderEnum>;
  readonly _rawName: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly abbreviation: InputMaybe<SortOrderEnum>;
  readonly brand: InputMaybe<SanityBrandSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenArea: InputMaybe<SanityAddressAreaSortInput>;
  readonly country: InputMaybe<SanityCountrySortInput>;
  readonly icon: InputMaybe<SanityIconSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly identities: InputMaybe<SanityIdentitySortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SanityLocaleStringSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly population: InputMaybe<SortOrderEnum>;
};

type SanityAddressStreet = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawName: Maybe<Scalars['JSON']>;
  readonly _rawParentArea: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<SanityLocaleString>;
  readonly parent: Maybe<Node>;
  readonly parentArea: Maybe<SanityAddressAreaOrCountry>;
};


type SanityAddressStreet__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityAddressStreet__rawNameArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressStreet__rawParentAreaArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAddressStreet__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityAddressStreetConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityAddressStreetEdge>;
  readonly group: ReadonlyArray<SanityAddressStreetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityAddressStreet>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityAddressStreetConnection_distinctArgs = {
  field: SanityAddressStreetFieldSelector;
};


type SanityAddressStreetConnection_groupArgs = {
  field: SanityAddressStreetFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityAddressStreetConnection_maxArgs = {
  field: SanityAddressStreetFieldSelector;
};


type SanityAddressStreetConnection_minArgs = {
  field: SanityAddressStreetFieldSelector;
};


type SanityAddressStreetConnection_sumArgs = {
  field: SanityAddressStreetFieldSelector;
};

type SanityAddressStreetEdge = {
  readonly next: Maybe<SanityAddressStreet>;
  readonly node: SanityAddressStreet;
  readonly previous: Maybe<SanityAddressStreet>;
};

type SanityAddressStreetFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawName: InputMaybe<FieldSelectorEnum>;
  readonly _rawParentArea: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<SanityLocaleStringFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SanityAddressStreetFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawName: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawParentArea: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<SanityLocaleStringFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SanityAddressStreetGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityAddressStreetEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityAddressStreetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityAddressStreet>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityAddressStreetGroupConnection_distinctArgs = {
  field: SanityAddressStreetFieldSelector;
};


type SanityAddressStreetGroupConnection_groupArgs = {
  field: SanityAddressStreetFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityAddressStreetGroupConnection_maxArgs = {
  field: SanityAddressStreetFieldSelector;
};


type SanityAddressStreetGroupConnection_minArgs = {
  field: SanityAddressStreetFieldSelector;
};


type SanityAddressStreetGroupConnection_sumArgs = {
  field: SanityAddressStreetFieldSelector;
};

type SanityAddressStreetSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawName: InputMaybe<SortOrderEnum>;
  readonly _rawParentArea: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SanityLocaleStringSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SanityAssetSourceData = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type SanityAssetSourceDataFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type SanityAssetSourceDataFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type SanityAssetSourceDataSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type SanityAttribute = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawIcon: Maybe<Scalars['JSON']>;
  readonly _rawName: Maybe<Scalars['JSON']>;
  readonly _rawType: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly icon: Maybe<ReadonlyArray<Maybe<SanityIcon>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<SanityLocaleString>;
  readonly parent: Maybe<Node>;
  readonly type: Maybe<SanityAttributeType>;
};


type SanityAttribute__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityAttribute__rawIconArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAttribute__rawNameArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAttribute__rawTypeArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAttribute__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityAttributeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityAttributeEdge>;
  readonly group: ReadonlyArray<SanityAttributeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityAttribute>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityAttributeConnection_distinctArgs = {
  field: SanityAttributeFieldSelector;
};


type SanityAttributeConnection_groupArgs = {
  field: SanityAttributeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityAttributeConnection_maxArgs = {
  field: SanityAttributeFieldSelector;
};


type SanityAttributeConnection_minArgs = {
  field: SanityAttributeFieldSelector;
};


type SanityAttributeConnection_sumArgs = {
  field: SanityAttributeFieldSelector;
};

type SanityAttributeEdge = {
  readonly next: Maybe<SanityAttribute>;
  readonly node: SanityAttribute;
  readonly previous: Maybe<SanityAttribute>;
};

type SanityAttributeFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawIcon: InputMaybe<FieldSelectorEnum>;
  readonly _rawName: InputMaybe<FieldSelectorEnum>;
  readonly _rawType: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly icon: InputMaybe<SanityIconFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<SanityLocaleStringFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly type: InputMaybe<SanityAttributeTypeFieldSelector>;
};

type SanityAttributeFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawName: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawType: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly icon: InputMaybe<SanityIconFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<SanityLocaleStringFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly type: InputMaybe<SanityAttributeTypeFilterInput>;
};

type SanityAttributeFilterListInput = {
  readonly elemMatch: InputMaybe<SanityAttributeFilterInput>;
};

type SanityAttributeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityAttributeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityAttributeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityAttribute>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityAttributeGroupConnection_distinctArgs = {
  field: SanityAttributeFieldSelector;
};


type SanityAttributeGroupConnection_groupArgs = {
  field: SanityAttributeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityAttributeGroupConnection_maxArgs = {
  field: SanityAttributeFieldSelector;
};


type SanityAttributeGroupConnection_minArgs = {
  field: SanityAttributeFieldSelector;
};


type SanityAttributeGroupConnection_sumArgs = {
  field: SanityAttributeFieldSelector;
};

type SanityAttributeSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawIcon: InputMaybe<SortOrderEnum>;
  readonly _rawName: InputMaybe<SortOrderEnum>;
  readonly _rawType: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly icon: InputMaybe<SanityIconSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SanityLocaleStringSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly type: InputMaybe<SanityAttributeTypeSortInput>;
};

type SanityAttributeType = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawIcon: Maybe<Scalars['JSON']>;
  readonly _rawName: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly icon: Maybe<ReadonlyArray<Maybe<SanityIcon>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<SanityLocaleString>;
  readonly parent: Maybe<Node>;
};


type SanityAttributeType__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityAttributeType__rawIconArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAttributeType__rawNameArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityAttributeType__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityAttributeTypeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityAttributeTypeEdge>;
  readonly group: ReadonlyArray<SanityAttributeTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityAttributeType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityAttributeTypeConnection_distinctArgs = {
  field: SanityAttributeTypeFieldSelector;
};


type SanityAttributeTypeConnection_groupArgs = {
  field: SanityAttributeTypeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityAttributeTypeConnection_maxArgs = {
  field: SanityAttributeTypeFieldSelector;
};


type SanityAttributeTypeConnection_minArgs = {
  field: SanityAttributeTypeFieldSelector;
};


type SanityAttributeTypeConnection_sumArgs = {
  field: SanityAttributeTypeFieldSelector;
};

type SanityAttributeTypeEdge = {
  readonly next: Maybe<SanityAttributeType>;
  readonly node: SanityAttributeType;
  readonly previous: Maybe<SanityAttributeType>;
};

type SanityAttributeTypeFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawIcon: InputMaybe<FieldSelectorEnum>;
  readonly _rawName: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly icon: InputMaybe<SanityIconFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<SanityLocaleStringFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SanityAttributeTypeFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawName: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly icon: InputMaybe<SanityIconFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<SanityLocaleStringFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SanityAttributeTypeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityAttributeTypeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityAttributeTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityAttributeType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityAttributeTypeGroupConnection_distinctArgs = {
  field: SanityAttributeTypeFieldSelector;
};


type SanityAttributeTypeGroupConnection_groupArgs = {
  field: SanityAttributeTypeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityAttributeTypeGroupConnection_maxArgs = {
  field: SanityAttributeTypeFieldSelector;
};


type SanityAttributeTypeGroupConnection_minArgs = {
  field: SanityAttributeTypeFieldSelector;
};


type SanityAttributeTypeGroupConnection_sumArgs = {
  field: SanityAttributeTypeFieldSelector;
};

type SanityAttributeTypeSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawIcon: InputMaybe<SortOrderEnum>;
  readonly _rawName: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly icon: InputMaybe<SanityIconSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SanityLocaleStringSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SanityBlock = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawChildren: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly children: Maybe<ReadonlyArray<Maybe<SanitySpan>>>;
  readonly list: Maybe<Scalars['String']>;
  readonly style: Maybe<Scalars['String']>;
};


type SanityBlock__rawChildrenArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityBlockAccordion = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawAccordion: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly accordion: Maybe<ReadonlyArray<Maybe<SanityAccordion>>>;
  readonly title: Maybe<Scalars['String']>;
};


type SanityBlockAccordion__rawAccordionArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityBlockFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawChildren: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<SanitySpanFieldSelector>;
  readonly list: InputMaybe<FieldSelectorEnum>;
  readonly style: InputMaybe<FieldSelectorEnum>;
};

type SanityBlockFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawChildren: InputMaybe<JSONQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<SanitySpanFilterListInput>;
  readonly list: InputMaybe<StringQueryOperatorInput>;
  readonly style: InputMaybe<StringQueryOperatorInput>;
};

type SanityBlockFilterListInput = {
  readonly elemMatch: InputMaybe<SanityBlockFilterInput>;
};

type SanityBlockHeader = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawButton: Maybe<Scalars['JSON']>;
  readonly _rawImage: Maybe<Scalars['JSON']>;
  readonly _rawInput: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly button: Maybe<SanityButton>;
  readonly image: Maybe<SanityImage>;
  readonly input: Maybe<SanityInput>;
  readonly largeHeroSize: Maybe<Scalars['Boolean']>;
  readonly page: Maybe<Scalars['String']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};


type SanityBlockHeader__rawButtonArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityBlockHeader__rawImageArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityBlockHeader__rawInputArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityBlockIconText = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawIcons: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly icons: Maybe<ReadonlyArray<Maybe<SanityIconText>>>;
  readonly large: Maybe<Scalars['Boolean']>;
  readonly title: Maybe<Scalars['String']>;
};


type SanityBlockIconText__rawIconsArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityBlockImage = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawImage: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly body: Maybe<Scalars['String']>;
  readonly image: Maybe<SanityImage>;
  readonly title: Maybe<Scalars['String']>;
};


type SanityBlockImage__rawImageArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityBlockList = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawList: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly list: Maybe<ReadonlyArray<Maybe<SanityListItems>>>;
  readonly title: Maybe<Scalars['String']>;
};


type SanityBlockList__rawListArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityBlockOrBlockAccordionOrBlockHeaderOrBlockIconTextOrBlockImageOrBlockListOrBlockReviewOrBlockVideoOrButtonOrIconOrSpacerOrTable = SanityBlock | SanityBlockAccordion | SanityBlockHeader | SanityBlockIconText | SanityBlockImage | SanityBlockList | SanityBlockReview | SanityBlockVideo | SanityButton | SanityIcon | SanitySpacer | SanityTable;

type SanityBlockReview = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawReview: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly review: Maybe<ReadonlyArray<Maybe<SanityReview>>>;
  readonly title: Maybe<Scalars['String']>;
};


type SanityBlockReview__rawReviewArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityBlockSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawChildren: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<SanitySpanSortInput>;
  readonly list: InputMaybe<SortOrderEnum>;
  readonly style: InputMaybe<SortOrderEnum>;
};

type SanityBlockVideo = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly video: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
};

type SanityBrand = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawChild: Maybe<Scalars['JSON']>;
  readonly _rawLogo: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly child: Maybe<ReadonlyArray<Maybe<SanityBrand>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly logo: Maybe<SanityLogo>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly tags: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
};


type SanityBrand__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityBrand__rawChildArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityBrand__rawLogoArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityBrand__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityBrandConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityBrandEdge>;
  readonly group: ReadonlyArray<SanityBrandGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityBrand>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityBrandConnection_distinctArgs = {
  field: SanityBrandFieldSelector;
};


type SanityBrandConnection_groupArgs = {
  field: SanityBrandFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityBrandConnection_maxArgs = {
  field: SanityBrandFieldSelector;
};


type SanityBrandConnection_minArgs = {
  field: SanityBrandFieldSelector;
};


type SanityBrandConnection_sumArgs = {
  field: SanityBrandFieldSelector;
};

type SanityBrandEdge = {
  readonly next: Maybe<SanityBrand>;
  readonly node: SanityBrand;
  readonly previous: Maybe<SanityBrand>;
};

type SanityBrandFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawChild: InputMaybe<FieldSelectorEnum>;
  readonly _rawLogo: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly child: InputMaybe<SanityBrandFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly logo: InputMaybe<SanityLogoFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
};

type SanityBrandFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawChild: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawLogo: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly child: InputMaybe<SanityBrandFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly logo: InputMaybe<SanityLogoFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
};

type SanityBrandFilterListInput = {
  readonly elemMatch: InputMaybe<SanityBrandFilterInput>;
};

type SanityBrandGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityBrandEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityBrandGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityBrand>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityBrandGroupConnection_distinctArgs = {
  field: SanityBrandFieldSelector;
};


type SanityBrandGroupConnection_groupArgs = {
  field: SanityBrandFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityBrandGroupConnection_maxArgs = {
  field: SanityBrandFieldSelector;
};


type SanityBrandGroupConnection_minArgs = {
  field: SanityBrandFieldSelector;
};


type SanityBrandGroupConnection_sumArgs = {
  field: SanityBrandFieldSelector;
};

type SanityBrandSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawChild: InputMaybe<SortOrderEnum>;
  readonly _rawLogo: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly child: InputMaybe<SanityBrandSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly logo: InputMaybe<SanityLogoSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly tags: InputMaybe<SortOrderEnum>;
};

type SanityButton = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly label: Maybe<Scalars['String']>;
  readonly to: Maybe<Scalars['String']>;
};

type SanityColor = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly touchless_id: Maybe<Scalars['String']>;
};


type SanityColor__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityColor__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityColorConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityColorEdge>;
  readonly group: ReadonlyArray<SanityColorGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityColor>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityColorConnection_distinctArgs = {
  field: SanityColorFieldSelector;
};


type SanityColorConnection_groupArgs = {
  field: SanityColorFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityColorConnection_maxArgs = {
  field: SanityColorFieldSelector;
};


type SanityColorConnection_minArgs = {
  field: SanityColorFieldSelector;
};


type SanityColorConnection_sumArgs = {
  field: SanityColorFieldSelector;
};

type SanityColorEdge = {
  readonly next: Maybe<SanityColor>;
  readonly node: SanityColor;
  readonly previous: Maybe<SanityColor>;
};

type SanityColorFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly touchless_id: InputMaybe<FieldSelectorEnum>;
};

type SanityColorFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly touchless_id: InputMaybe<StringQueryOperatorInput>;
};

type SanityColorGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityColorEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityColorGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityColor>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityColorGroupConnection_distinctArgs = {
  field: SanityColorFieldSelector;
};


type SanityColorGroupConnection_groupArgs = {
  field: SanityColorFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityColorGroupConnection_maxArgs = {
  field: SanityColorFieldSelector;
};


type SanityColorGroupConnection_minArgs = {
  field: SanityColorFieldSelector;
};


type SanityColorGroupConnection_sumArgs = {
  field: SanityColorFieldSelector;
};

type SanityColorSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly touchless_id: InputMaybe<SortOrderEnum>;
};

type SanityContent = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawFreight: Maybe<Scalars['JSON']>;
  readonly _rawSlug: Maybe<Scalars['JSON']>;
  readonly _rawText: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly freight: Maybe<ReadonlyArray<Maybe<SanityFreight>>>;
  readonly h1: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly no_freight: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly paragraph: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly slug: Maybe<SanitySlug>;
  readonly text: Maybe<ReadonlyArray<Maybe<SanityBlock>>>;
  readonly title: Maybe<Scalars['String']>;
};


type SanityContent__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityContent__rawFreightArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityContent__rawSlugArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityContent__rawTextArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityContent__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityContentConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityContentEdge>;
  readonly group: ReadonlyArray<SanityContentGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityContent>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityContentConnection_distinctArgs = {
  field: SanityContentFieldSelector;
};


type SanityContentConnection_groupArgs = {
  field: SanityContentFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityContentConnection_maxArgs = {
  field: SanityContentFieldSelector;
};


type SanityContentConnection_minArgs = {
  field: SanityContentFieldSelector;
};


type SanityContentConnection_sumArgs = {
  field: SanityContentFieldSelector;
};

type SanityContentEdge = {
  readonly next: Maybe<SanityContent>;
  readonly node: SanityContent;
  readonly previous: Maybe<SanityContent>;
};

type SanityContentFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawFreight: InputMaybe<FieldSelectorEnum>;
  readonly _rawSlug: InputMaybe<FieldSelectorEnum>;
  readonly _rawText: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly freight: InputMaybe<SanityFreightFieldSelector>;
  readonly h1: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly no_freight: InputMaybe<FieldSelectorEnum>;
  readonly paragraph: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly slug: InputMaybe<SanitySlugFieldSelector>;
  readonly text: InputMaybe<SanityBlockFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SanityContentFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawFreight: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawSlug: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawText: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly freight: InputMaybe<SanityFreightFilterListInput>;
  readonly h1: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly no_freight: InputMaybe<StringQueryOperatorInput>;
  readonly paragraph: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<SanitySlugFilterInput>;
  readonly text: InputMaybe<SanityBlockFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SanityContentGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityContentEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityContentGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityContent>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityContentGroupConnection_distinctArgs = {
  field: SanityContentFieldSelector;
};


type SanityContentGroupConnection_groupArgs = {
  field: SanityContentFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityContentGroupConnection_maxArgs = {
  field: SanityContentFieldSelector;
};


type SanityContentGroupConnection_minArgs = {
  field: SanityContentFieldSelector;
};


type SanityContentGroupConnection_sumArgs = {
  field: SanityContentFieldSelector;
};

type SanityContentSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawFreight: InputMaybe<SortOrderEnum>;
  readonly _rawSlug: InputMaybe<SortOrderEnum>;
  readonly _rawText: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly freight: InputMaybe<SanityFreightSortInput>;
  readonly h1: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly no_freight: InputMaybe<SortOrderEnum>;
  readonly paragraph: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly slug: InputMaybe<SanitySlugSortInput>;
  readonly text: InputMaybe<SanityBlockSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SanityCountry = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawFlag: Maybe<Scalars['JSON']>;
  readonly _rawIdentities: Maybe<Scalars['JSON']>;
  readonly _rawName: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly flag: Maybe<SanityImage>;
  readonly id: Scalars['ID'];
  readonly identities: Maybe<ReadonlyArray<Maybe<SanityIdentity>>>;
  readonly internal: Internal;
  readonly name: Maybe<SanityLocaleString>;
  readonly parent: Maybe<Node>;
};


type SanityCountry__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityCountry__rawFlagArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityCountry__rawIdentitiesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityCountry__rawNameArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityCountry__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityCountryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityCountryEdge>;
  readonly group: ReadonlyArray<SanityCountryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityCountry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityCountryConnection_distinctArgs = {
  field: SanityCountryFieldSelector;
};


type SanityCountryConnection_groupArgs = {
  field: SanityCountryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityCountryConnection_maxArgs = {
  field: SanityCountryFieldSelector;
};


type SanityCountryConnection_minArgs = {
  field: SanityCountryFieldSelector;
};


type SanityCountryConnection_sumArgs = {
  field: SanityCountryFieldSelector;
};

type SanityCountryEdge = {
  readonly next: Maybe<SanityCountry>;
  readonly node: SanityCountry;
  readonly previous: Maybe<SanityCountry>;
};

type SanityCountryFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawFlag: InputMaybe<FieldSelectorEnum>;
  readonly _rawIdentities: InputMaybe<FieldSelectorEnum>;
  readonly _rawName: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly flag: InputMaybe<SanityImageFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly identities: InputMaybe<SanityIdentityFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<SanityLocaleStringFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SanityCountryFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawFlag: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawIdentities: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawName: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly flag: InputMaybe<SanityImageFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly identities: InputMaybe<SanityIdentityFilterListInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<SanityLocaleStringFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SanityCountryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityCountryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityCountryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityCountry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityCountryGroupConnection_distinctArgs = {
  field: SanityCountryFieldSelector;
};


type SanityCountryGroupConnection_groupArgs = {
  field: SanityCountryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityCountryGroupConnection_maxArgs = {
  field: SanityCountryFieldSelector;
};


type SanityCountryGroupConnection_minArgs = {
  field: SanityCountryFieldSelector;
};


type SanityCountryGroupConnection_sumArgs = {
  field: SanityCountryFieldSelector;
};

type SanityCountrySortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawFlag: InputMaybe<SortOrderEnum>;
  readonly _rawIdentities: InputMaybe<SortOrderEnum>;
  readonly _rawName: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly flag: InputMaybe<SanityImageSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly identities: InputMaybe<SanityIdentitySortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SanityLocaleStringSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SanityDepartment = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawHours: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly contact: Maybe<Scalars['String']>;
  readonly hours: Maybe<SanityHours>;
  readonly name: Maybe<Scalars['String']>;
};


type SanityDepartment__rawHoursArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityDepartmentFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawHours: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly contact: InputMaybe<FieldSelectorEnum>;
  readonly hours: InputMaybe<SanityHoursFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type SanityDepartmentFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawHours: InputMaybe<JSONQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly contact: InputMaybe<StringQueryOperatorInput>;
  readonly hours: InputMaybe<SanityHoursFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type SanityDepartmentFilterListInput = {
  readonly elemMatch: InputMaybe<SanityDepartmentFilterInput>;
};

type SanityDepartmentSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawHours: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly contact: InputMaybe<SortOrderEnum>;
  readonly hours: InputMaybe<SanityHoursSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
};

type SanityDepartmentType = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawIcon: Maybe<Scalars['JSON']>;
  readonly _rawIdentities: Maybe<Scalars['JSON']>;
  readonly _rawIndusry: Maybe<Scalars['JSON']>;
  readonly _rawName: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly icon: Maybe<ReadonlyArray<Maybe<SanityIcon>>>;
  readonly id: Scalars['ID'];
  readonly identities: Maybe<ReadonlyArray<Maybe<SanityIdentity>>>;
  readonly indusry: Maybe<ReadonlyArray<Maybe<SanityIndustry>>>;
  readonly internal: Internal;
  readonly name: Maybe<SanityLocaleString>;
  readonly parent: Maybe<Node>;
};


type SanityDepartmentType__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityDepartmentType__rawIconArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityDepartmentType__rawIdentitiesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityDepartmentType__rawIndusryArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityDepartmentType__rawNameArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityDepartmentType__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityDepartmentTypeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityDepartmentTypeEdge>;
  readonly group: ReadonlyArray<SanityDepartmentTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityDepartmentType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityDepartmentTypeConnection_distinctArgs = {
  field: SanityDepartmentTypeFieldSelector;
};


type SanityDepartmentTypeConnection_groupArgs = {
  field: SanityDepartmentTypeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityDepartmentTypeConnection_maxArgs = {
  field: SanityDepartmentTypeFieldSelector;
};


type SanityDepartmentTypeConnection_minArgs = {
  field: SanityDepartmentTypeFieldSelector;
};


type SanityDepartmentTypeConnection_sumArgs = {
  field: SanityDepartmentTypeFieldSelector;
};

type SanityDepartmentTypeEdge = {
  readonly next: Maybe<SanityDepartmentType>;
  readonly node: SanityDepartmentType;
  readonly previous: Maybe<SanityDepartmentType>;
};

type SanityDepartmentTypeFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawIcon: InputMaybe<FieldSelectorEnum>;
  readonly _rawIdentities: InputMaybe<FieldSelectorEnum>;
  readonly _rawIndusry: InputMaybe<FieldSelectorEnum>;
  readonly _rawName: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly icon: InputMaybe<SanityIconFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly identities: InputMaybe<SanityIdentityFieldSelector>;
  readonly indusry: InputMaybe<SanityIndustryFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<SanityLocaleStringFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SanityDepartmentTypeFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawIdentities: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawIndusry: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawName: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly icon: InputMaybe<SanityIconFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly identities: InputMaybe<SanityIdentityFilterListInput>;
  readonly indusry: InputMaybe<SanityIndustryFilterListInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<SanityLocaleStringFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SanityDepartmentTypeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityDepartmentTypeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityDepartmentTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityDepartmentType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityDepartmentTypeGroupConnection_distinctArgs = {
  field: SanityDepartmentTypeFieldSelector;
};


type SanityDepartmentTypeGroupConnection_groupArgs = {
  field: SanityDepartmentTypeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityDepartmentTypeGroupConnection_maxArgs = {
  field: SanityDepartmentTypeFieldSelector;
};


type SanityDepartmentTypeGroupConnection_minArgs = {
  field: SanityDepartmentTypeFieldSelector;
};


type SanityDepartmentTypeGroupConnection_sumArgs = {
  field: SanityDepartmentTypeFieldSelector;
};

type SanityDepartmentTypeSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawIcon: InputMaybe<SortOrderEnum>;
  readonly _rawIdentities: InputMaybe<SortOrderEnum>;
  readonly _rawIndusry: InputMaybe<SortOrderEnum>;
  readonly _rawName: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly icon: InputMaybe<SanityIconSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly identities: InputMaybe<SanityIdentitySortInput>;
  readonly indusry: InputMaybe<SanityIndustrySortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SanityLocaleStringSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

/** A Sanity document */
type SanityDocument = {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
};

type SanityEmployee = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly photoURL: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SanityEntity = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawAcronym: Maybe<Scalars['JSON']>;
  readonly _rawBrand: Maybe<Scalars['JSON']>;
  readonly _rawChildrenEntity: Maybe<Scalars['JSON']>;
  readonly _rawDepartments: Maybe<Scalars['JSON']>;
  readonly _rawIdentity: Maybe<Scalars['JSON']>;
  readonly _rawName: Maybe<Scalars['JSON']>;
  readonly _rawParentEntity: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly acronym: Maybe<SanityLocaleString>;
  readonly brand: Maybe<SanityBrand>;
  readonly children: ReadonlyArray<Node>;
  readonly childrenEntity: Maybe<ReadonlyArray<Maybe<SanityEntity>>>;
  readonly departments: Maybe<ReadonlyArray<Maybe<SanityDepartment>>>;
  readonly id: Scalars['ID'];
  readonly identity: Maybe<ReadonlyArray<Maybe<SanityIdentity>>>;
  readonly internal: Internal;
  readonly legal_name: Maybe<Scalars['String']>;
  readonly name: Maybe<SanityLocaleString>;
  readonly parent: Maybe<Node>;
  readonly parentEntity: Maybe<SanityEntity>;
};


type SanityEntity__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityEntity__rawAcronymArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityEntity__rawBrandArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityEntity__rawChildrenEntityArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityEntity__rawDepartmentsArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityEntity__rawIdentityArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityEntity__rawNameArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityEntity__rawParentEntityArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityEntity__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityEntityConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityEntityEdge>;
  readonly group: ReadonlyArray<SanityEntityGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityEntity>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityEntityConnection_distinctArgs = {
  field: SanityEntityFieldSelector;
};


type SanityEntityConnection_groupArgs = {
  field: SanityEntityFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityEntityConnection_maxArgs = {
  field: SanityEntityFieldSelector;
};


type SanityEntityConnection_minArgs = {
  field: SanityEntityFieldSelector;
};


type SanityEntityConnection_sumArgs = {
  field: SanityEntityFieldSelector;
};

type SanityEntityEdge = {
  readonly next: Maybe<SanityEntity>;
  readonly node: SanityEntity;
  readonly previous: Maybe<SanityEntity>;
};

type SanityEntityFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawAcronym: InputMaybe<FieldSelectorEnum>;
  readonly _rawBrand: InputMaybe<FieldSelectorEnum>;
  readonly _rawChildrenEntity: InputMaybe<FieldSelectorEnum>;
  readonly _rawDepartments: InputMaybe<FieldSelectorEnum>;
  readonly _rawIdentity: InputMaybe<FieldSelectorEnum>;
  readonly _rawName: InputMaybe<FieldSelectorEnum>;
  readonly _rawParentEntity: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly acronym: InputMaybe<SanityLocaleStringFieldSelector>;
  readonly brand: InputMaybe<SanityBrandFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenEntity: InputMaybe<SanityEntityFieldSelector>;
  readonly departments: InputMaybe<SanityDepartmentFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly identity: InputMaybe<SanityIdentityFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly legal_name: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<SanityLocaleStringFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly parentEntity: InputMaybe<SanityEntityFieldSelector>;
};

type SanityEntityFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawAcronym: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawChildrenEntity: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawDepartments: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawIdentity: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawName: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawParentEntity: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly acronym: InputMaybe<SanityLocaleStringFilterInput>;
  readonly brand: InputMaybe<SanityBrandFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenEntity: InputMaybe<SanityEntityFilterListInput>;
  readonly departments: InputMaybe<SanityDepartmentFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly identity: InputMaybe<SanityIdentityFilterListInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly legal_name: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<SanityLocaleStringFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parentEntity: InputMaybe<SanityEntityFilterInput>;
};

type SanityEntityFilterListInput = {
  readonly elemMatch: InputMaybe<SanityEntityFilterInput>;
};

type SanityEntityGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityEntityEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityEntityGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityEntity>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityEntityGroupConnection_distinctArgs = {
  field: SanityEntityFieldSelector;
};


type SanityEntityGroupConnection_groupArgs = {
  field: SanityEntityFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityEntityGroupConnection_maxArgs = {
  field: SanityEntityFieldSelector;
};


type SanityEntityGroupConnection_minArgs = {
  field: SanityEntityFieldSelector;
};


type SanityEntityGroupConnection_sumArgs = {
  field: SanityEntityFieldSelector;
};

type SanityEntitySortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawAcronym: InputMaybe<SortOrderEnum>;
  readonly _rawBrand: InputMaybe<SortOrderEnum>;
  readonly _rawChildrenEntity: InputMaybe<SortOrderEnum>;
  readonly _rawDepartments: InputMaybe<SortOrderEnum>;
  readonly _rawIdentity: InputMaybe<SortOrderEnum>;
  readonly _rawName: InputMaybe<SortOrderEnum>;
  readonly _rawParentEntity: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly acronym: InputMaybe<SanityLocaleStringSortInput>;
  readonly brand: InputMaybe<SanityBrandSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenEntity: InputMaybe<SanityEntitySortInput>;
  readonly departments: InputMaybe<SanityDepartmentSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly identity: InputMaybe<SanityIdentitySortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly legal_name: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SanityLocaleStringSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly parentEntity: InputMaybe<SanityEntitySortInput>;
};

type SanityFeature = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawIcon: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly icon: Maybe<SanityImage>;
  readonly title: Maybe<Scalars['String']>;
};


type SanityFeature__rawIconArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityFeatureFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawIcon: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<SanityImageFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SanityFeatureFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<SanityImageFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SanityFeatureFilterListInput = {
  readonly elemMatch: InputMaybe<SanityFeatureFilterInput>;
};

type SanityFeatureSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawIcon: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<SanityImageSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SanityFi = {
  readonly Branches: Maybe<ReadonlyArray<Maybe<SanityLocation>>>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawBranches: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly legal_name: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly swift: Maybe<Scalars['String']>;
};


type SanityFi__rawBranchesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityFile = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawAsset: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly asset: Maybe<SanityFileAsset>;
};


type SanityFile__rawAssetArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityFileAsset = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawSource: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly altText: Maybe<Scalars['String']>;
  readonly assetId: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly extension: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly label: Maybe<Scalars['String']>;
  readonly mimeType: Maybe<Scalars['String']>;
  readonly originalFilename: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly path: Maybe<Scalars['String']>;
  readonly sha1hash: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly source: Maybe<SanityAssetSourceData>;
  readonly title: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};


type SanityFileAsset__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityFileAsset__rawSourceArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityFileAsset__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityFileAssetConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityFileAssetEdge>;
  readonly group: ReadonlyArray<SanityFileAssetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityFileAsset>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityFileAssetConnection_distinctArgs = {
  field: SanityFileAssetFieldSelector;
};


type SanityFileAssetConnection_groupArgs = {
  field: SanityFileAssetFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityFileAssetConnection_maxArgs = {
  field: SanityFileAssetFieldSelector;
};


type SanityFileAssetConnection_minArgs = {
  field: SanityFileAssetFieldSelector;
};


type SanityFileAssetConnection_sumArgs = {
  field: SanityFileAssetFieldSelector;
};

type SanityFileAssetEdge = {
  readonly next: Maybe<SanityFileAsset>;
  readonly node: SanityFileAsset;
  readonly previous: Maybe<SanityFileAsset>;
};

type SanityFileAssetFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawSource: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly altText: InputMaybe<FieldSelectorEnum>;
  readonly assetId: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly mimeType: InputMaybe<FieldSelectorEnum>;
  readonly originalFilename: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly sha1hash: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly source: InputMaybe<SanityAssetSourceDataFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type SanityFileAssetFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawSource: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly altText: InputMaybe<StringQueryOperatorInput>;
  readonly assetId: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly mimeType: InputMaybe<StringQueryOperatorInput>;
  readonly originalFilename: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly sha1hash: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly source: InputMaybe<SanityAssetSourceDataFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type SanityFileAssetGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityFileAssetEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityFileAssetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityFileAsset>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityFileAssetGroupConnection_distinctArgs = {
  field: SanityFileAssetFieldSelector;
};


type SanityFileAssetGroupConnection_groupArgs = {
  field: SanityFileAssetFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityFileAssetGroupConnection_maxArgs = {
  field: SanityFileAssetFieldSelector;
};


type SanityFileAssetGroupConnection_minArgs = {
  field: SanityFileAssetFieldSelector;
};


type SanityFileAssetGroupConnection_sumArgs = {
  field: SanityFileAssetFieldSelector;
};

type SanityFileAssetSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawSource: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly altText: InputMaybe<SortOrderEnum>;
  readonly assetId: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly label: InputMaybe<SortOrderEnum>;
  readonly mimeType: InputMaybe<SortOrderEnum>;
  readonly originalFilename: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly sha1hash: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly source: InputMaybe<SanityAssetSourceDataSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type SanityFreight = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly freight_amount: Maybe<Scalars['Float']>;
  readonly model: Maybe<Scalars['String']>;
  readonly year: Maybe<Scalars['Float']>;
};

type SanityFreightFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly freight_amount: InputMaybe<FieldSelectorEnum>;
  readonly model: InputMaybe<FieldSelectorEnum>;
  readonly year: InputMaybe<FieldSelectorEnum>;
};

type SanityFreightFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly freight_amount: InputMaybe<FloatQueryOperatorInput>;
  readonly model: InputMaybe<StringQueryOperatorInput>;
  readonly year: InputMaybe<FloatQueryOperatorInput>;
};

type SanityFreightFilterListInput = {
  readonly elemMatch: InputMaybe<SanityFreightFilterInput>;
};

type SanityFreightSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly freight_amount: InputMaybe<SortOrderEnum>;
  readonly model: InputMaybe<SortOrderEnum>;
  readonly year: InputMaybe<SortOrderEnum>;
};

type SanityGatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none';

type SanityGeopoint = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly alt: Maybe<Scalars['Float']>;
  readonly lat: Maybe<Scalars['Float']>;
  readonly lng: Maybe<Scalars['Float']>;
};

type SanityGeopointFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly lat: InputMaybe<FieldSelectorEnum>;
  readonly lng: InputMaybe<FieldSelectorEnum>;
};

type SanityGeopointFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly alt: InputMaybe<FloatQueryOperatorInput>;
  readonly lat: InputMaybe<FloatQueryOperatorInput>;
  readonly lng: InputMaybe<FloatQueryOperatorInput>;
};

type SanityGeopointSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly lat: InputMaybe<SortOrderEnum>;
  readonly lng: InputMaybe<SortOrderEnum>;
};

type SanityHourRange = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly time_h: Maybe<Scalars['Float']>;
  readonly time_m: Maybe<Scalars['Float']>;
};

type SanityHours = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly friday_reg_time_closed: Maybe<Scalars['String']>;
  readonly friday_reg_time_open: Maybe<Scalars['String']>;
  readonly monday_reg_time_closed: Maybe<Scalars['String']>;
  readonly monday_reg_time_open: Maybe<Scalars['String']>;
  readonly saturday_reg_time_closed: Maybe<Scalars['String']>;
  readonly saturday_reg_time_open: Maybe<Scalars['String']>;
  readonly sunday_reg_time_closed: Maybe<Scalars['String']>;
  readonly sunday_reg_time_open: Maybe<Scalars['String']>;
  readonly thursday_reg_time_closed: Maybe<Scalars['String']>;
  readonly thursday_reg_time_open: Maybe<Scalars['String']>;
  readonly tuesday_reg_time_closed: Maybe<Scalars['String']>;
  readonly tuesday_reg_time_open: Maybe<Scalars['String']>;
  readonly wednesday_reg_time_closed: Maybe<Scalars['String']>;
  readonly wednesday_reg_time_open: Maybe<Scalars['String']>;
};

type SanityHoursFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly friday_reg_time_closed: InputMaybe<FieldSelectorEnum>;
  readonly friday_reg_time_open: InputMaybe<FieldSelectorEnum>;
  readonly monday_reg_time_closed: InputMaybe<FieldSelectorEnum>;
  readonly monday_reg_time_open: InputMaybe<FieldSelectorEnum>;
  readonly saturday_reg_time_closed: InputMaybe<FieldSelectorEnum>;
  readonly saturday_reg_time_open: InputMaybe<FieldSelectorEnum>;
  readonly sunday_reg_time_closed: InputMaybe<FieldSelectorEnum>;
  readonly sunday_reg_time_open: InputMaybe<FieldSelectorEnum>;
  readonly thursday_reg_time_closed: InputMaybe<FieldSelectorEnum>;
  readonly thursday_reg_time_open: InputMaybe<FieldSelectorEnum>;
  readonly tuesday_reg_time_closed: InputMaybe<FieldSelectorEnum>;
  readonly tuesday_reg_time_open: InputMaybe<FieldSelectorEnum>;
  readonly wednesday_reg_time_closed: InputMaybe<FieldSelectorEnum>;
  readonly wednesday_reg_time_open: InputMaybe<FieldSelectorEnum>;
};

type SanityHoursFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly friday_reg_time_closed: InputMaybe<StringQueryOperatorInput>;
  readonly friday_reg_time_open: InputMaybe<StringQueryOperatorInput>;
  readonly monday_reg_time_closed: InputMaybe<StringQueryOperatorInput>;
  readonly monday_reg_time_open: InputMaybe<StringQueryOperatorInput>;
  readonly saturday_reg_time_closed: InputMaybe<StringQueryOperatorInput>;
  readonly saturday_reg_time_open: InputMaybe<StringQueryOperatorInput>;
  readonly sunday_reg_time_closed: InputMaybe<StringQueryOperatorInput>;
  readonly sunday_reg_time_open: InputMaybe<StringQueryOperatorInput>;
  readonly thursday_reg_time_closed: InputMaybe<StringQueryOperatorInput>;
  readonly thursday_reg_time_open: InputMaybe<StringQueryOperatorInput>;
  readonly tuesday_reg_time_closed: InputMaybe<StringQueryOperatorInput>;
  readonly tuesday_reg_time_open: InputMaybe<StringQueryOperatorInput>;
  readonly wednesday_reg_time_closed: InputMaybe<StringQueryOperatorInput>;
  readonly wednesday_reg_time_open: InputMaybe<StringQueryOperatorInput>;
};

type SanityHoursSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly friday_reg_time_closed: InputMaybe<SortOrderEnum>;
  readonly friday_reg_time_open: InputMaybe<SortOrderEnum>;
  readonly monday_reg_time_closed: InputMaybe<SortOrderEnum>;
  readonly monday_reg_time_open: InputMaybe<SortOrderEnum>;
  readonly saturday_reg_time_closed: InputMaybe<SortOrderEnum>;
  readonly saturday_reg_time_open: InputMaybe<SortOrderEnum>;
  readonly sunday_reg_time_closed: InputMaybe<SortOrderEnum>;
  readonly sunday_reg_time_open: InputMaybe<SortOrderEnum>;
  readonly thursday_reg_time_closed: InputMaybe<SortOrderEnum>;
  readonly thursday_reg_time_open: InputMaybe<SortOrderEnum>;
  readonly tuesday_reg_time_closed: InputMaybe<SortOrderEnum>;
  readonly tuesday_reg_time_open: InputMaybe<SortOrderEnum>;
  readonly wednesday_reg_time_closed: InputMaybe<SortOrderEnum>;
  readonly wednesday_reg_time_open: InputMaybe<SortOrderEnum>;
};

type SanityIcon = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawImage: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<SanityImage>;
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};


type SanityIcon__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityIcon__rawImageArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityIcon__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityIconConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityIconEdge>;
  readonly group: ReadonlyArray<SanityIconGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityIcon>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityIconConnection_distinctArgs = {
  field: SanityIconFieldSelector;
};


type SanityIconConnection_groupArgs = {
  field: SanityIconFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityIconConnection_maxArgs = {
  field: SanityIconFieldSelector;
};


type SanityIconConnection_minArgs = {
  field: SanityIconFieldSelector;
};


type SanityIconConnection_sumArgs = {
  field: SanityIconFieldSelector;
};

type SanityIconEdge = {
  readonly next: Maybe<SanityIcon>;
  readonly node: SanityIcon;
  readonly previous: Maybe<SanityIcon>;
};

type SanityIconFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawImage: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<SanityImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SanityIconFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawImage: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<SanityImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SanityIconFilterListInput = {
  readonly elemMatch: InputMaybe<SanityIconFilterInput>;
};

type SanityIconGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityIconEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityIconGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityIcon>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityIconGroupConnection_distinctArgs = {
  field: SanityIconFieldSelector;
};


type SanityIconGroupConnection_groupArgs = {
  field: SanityIconFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityIconGroupConnection_maxArgs = {
  field: SanityIconFieldSelector;
};


type SanityIconGroupConnection_minArgs = {
  field: SanityIconFieldSelector;
};


type SanityIconGroupConnection_sumArgs = {
  field: SanityIconFieldSelector;
};

type SanityIconSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawImage: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SanityImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SanityIconText = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawImage: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly image: Maybe<SanityImage>;
  readonly options: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly text: Maybe<Scalars['String']>;
};


type SanityIconText__rawImageArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityIdentity = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawBrand: Maybe<Scalars['JSON']>;
  readonly _rawEntity: Maybe<Scalars['JSON']>;
  readonly _rawType: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly brand: Maybe<SanityBrand>;
  readonly children: ReadonlyArray<Node>;
  readonly entity: Maybe<SanityAddressOrCountryOrDepartmentOrEntityOrLocation>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly type: Maybe<SanityNamespace>;
  readonly value: Maybe<Scalars['String']>;
};


type SanityIdentity__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityIdentity__rawBrandArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityIdentity__rawEntityArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityIdentity__rawTypeArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityIdentity__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityIdentityConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityIdentityEdge>;
  readonly group: ReadonlyArray<SanityIdentityGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityIdentity>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityIdentityConnection_distinctArgs = {
  field: SanityIdentityFieldSelector;
};


type SanityIdentityConnection_groupArgs = {
  field: SanityIdentityFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityIdentityConnection_maxArgs = {
  field: SanityIdentityFieldSelector;
};


type SanityIdentityConnection_minArgs = {
  field: SanityIdentityFieldSelector;
};


type SanityIdentityConnection_sumArgs = {
  field: SanityIdentityFieldSelector;
};

type SanityIdentityEdge = {
  readonly next: Maybe<SanityIdentity>;
  readonly node: SanityIdentity;
  readonly previous: Maybe<SanityIdentity>;
};

type SanityIdentityFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawBrand: InputMaybe<FieldSelectorEnum>;
  readonly _rawEntity: InputMaybe<FieldSelectorEnum>;
  readonly _rawType: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly brand: InputMaybe<SanityBrandFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly type: InputMaybe<SanityNamespaceFieldSelector>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type SanityIdentityFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawEntity: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawType: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly brand: InputMaybe<SanityBrandFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly type: InputMaybe<SanityNamespaceFilterInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type SanityIdentityFilterListInput = {
  readonly elemMatch: InputMaybe<SanityIdentityFilterInput>;
};

type SanityIdentityGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityIdentityEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityIdentityGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityIdentity>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityIdentityGroupConnection_distinctArgs = {
  field: SanityIdentityFieldSelector;
};


type SanityIdentityGroupConnection_groupArgs = {
  field: SanityIdentityFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityIdentityGroupConnection_maxArgs = {
  field: SanityIdentityFieldSelector;
};


type SanityIdentityGroupConnection_minArgs = {
  field: SanityIdentityFieldSelector;
};


type SanityIdentityGroupConnection_sumArgs = {
  field: SanityIdentityFieldSelector;
};

type SanityIdentitySortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawBrand: InputMaybe<SortOrderEnum>;
  readonly _rawEntity: InputMaybe<SortOrderEnum>;
  readonly _rawType: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly brand: InputMaybe<SanityBrandSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly type: InputMaybe<SanityNamespaceSortInput>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type SanityImage = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawAsset: Maybe<Scalars['JSON']>;
  readonly _rawCrop: Maybe<Scalars['JSON']>;
  readonly _rawHotspot: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly asset: Maybe<SanityImageAsset>;
  readonly crop: Maybe<SanityImageCrop>;
  readonly hotspot: Maybe<SanityImageHotspot>;
};


type SanityImage__rawAssetArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityImage__rawCropArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityImage__rawHotspotArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityImageAsset = Node & RemoteFile & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawMetadata: Maybe<Scalars['JSON']>;
  readonly _rawSource: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly altText: Maybe<Scalars['String']>;
  readonly assetId: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly extension: Maybe<Scalars['String']>;
  readonly filename: Scalars['String'];
  readonly filesize: Maybe<Scalars['Int']>;
  /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
  readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly label: Maybe<Scalars['String']>;
  readonly metadata: Maybe<SanityImageMetadata>;
  readonly mimeType: Scalars['String'];
  readonly originalFilename: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly path: Maybe<Scalars['String']>;
  readonly publicUrl: Scalars['String'];
  readonly resize: Maybe<RemoteFileResize>;
  readonly sha1hash: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly source: Maybe<SanityAssetSourceData>;
  readonly title: Maybe<Scalars['String']>;
  readonly uploadId: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type SanityImageAsset__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityImageAsset__rawMetadataArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityImageAsset__rawSourceArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityImageAsset__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityImageAsset_gatsbyImageArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
  height: InputMaybe<Scalars['Int']>;
  layout?: InputMaybe<RemoteFileLayout>;
  outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<RemoteFilePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


type SanityImageAsset_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  fit?: InputMaybe<SanityImageFit>;
  formats?: InputMaybe<ReadonlyArray<InputMaybe<GatsbyImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  layout: InputMaybe<GatsbyImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<SanityGatsbyImagePlaceholder>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


type SanityImageAsset_resizeArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  format?: InputMaybe<RemoteFileFormat>;
  height: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type SanityImageAssetConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityImageAssetEdge>;
  readonly group: ReadonlyArray<SanityImageAssetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityImageAsset>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityImageAssetConnection_distinctArgs = {
  field: SanityImageAssetFieldSelector;
};


type SanityImageAssetConnection_groupArgs = {
  field: SanityImageAssetFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityImageAssetConnection_maxArgs = {
  field: SanityImageAssetFieldSelector;
};


type SanityImageAssetConnection_minArgs = {
  field: SanityImageAssetFieldSelector;
};


type SanityImageAssetConnection_sumArgs = {
  field: SanityImageAssetFieldSelector;
};

type SanityImageAssetEdge = {
  readonly next: Maybe<SanityImageAsset>;
  readonly node: SanityImageAsset;
  readonly previous: Maybe<SanityImageAsset>;
};

type SanityImageAssetFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawMetadata: InputMaybe<FieldSelectorEnum>;
  readonly _rawSource: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly altText: InputMaybe<FieldSelectorEnum>;
  readonly assetId: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly filename: InputMaybe<FieldSelectorEnum>;
  readonly filesize: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyImage: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly metadata: InputMaybe<SanityImageMetadataFieldSelector>;
  readonly mimeType: InputMaybe<FieldSelectorEnum>;
  readonly originalFilename: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly publicUrl: InputMaybe<FieldSelectorEnum>;
  readonly resize: InputMaybe<RemoteFileResizeFieldSelector>;
  readonly sha1hash: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly source: InputMaybe<SanityAssetSourceDataFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly uploadId: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type SanityImageAssetFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawMetadata: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawSource: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly altText: InputMaybe<StringQueryOperatorInput>;
  readonly assetId: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly filename: InputMaybe<StringQueryOperatorInput>;
  readonly filesize: InputMaybe<IntQueryOperatorInput>;
  readonly gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly metadata: InputMaybe<SanityImageMetadataFilterInput>;
  readonly mimeType: InputMaybe<StringQueryOperatorInput>;
  readonly originalFilename: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly publicUrl: InputMaybe<StringQueryOperatorInput>;
  readonly resize: InputMaybe<RemoteFileResizeFilterInput>;
  readonly sha1hash: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly source: InputMaybe<SanityAssetSourceDataFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uploadId: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type SanityImageAssetGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityImageAssetEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityImageAssetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityImageAsset>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityImageAssetGroupConnection_distinctArgs = {
  field: SanityImageAssetFieldSelector;
};


type SanityImageAssetGroupConnection_groupArgs = {
  field: SanityImageAssetFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityImageAssetGroupConnection_maxArgs = {
  field: SanityImageAssetFieldSelector;
};


type SanityImageAssetGroupConnection_minArgs = {
  field: SanityImageAssetFieldSelector;
};


type SanityImageAssetGroupConnection_sumArgs = {
  field: SanityImageAssetFieldSelector;
};

type SanityImageAssetSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawMetadata: InputMaybe<SortOrderEnum>;
  readonly _rawSource: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly altText: InputMaybe<SortOrderEnum>;
  readonly assetId: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly filename: InputMaybe<SortOrderEnum>;
  readonly filesize: InputMaybe<SortOrderEnum>;
  readonly gatsbyImage: InputMaybe<SortOrderEnum>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly label: InputMaybe<SortOrderEnum>;
  readonly metadata: InputMaybe<SanityImageMetadataSortInput>;
  readonly mimeType: InputMaybe<SortOrderEnum>;
  readonly originalFilename: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly publicUrl: InputMaybe<SortOrderEnum>;
  readonly resize: InputMaybe<RemoteFileResizeSortInput>;
  readonly sha1hash: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly source: InputMaybe<SanityAssetSourceDataSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly uploadId: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type SanityImageCrop = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly bottom: Maybe<Scalars['Float']>;
  readonly left: Maybe<Scalars['Float']>;
  readonly right: Maybe<Scalars['Float']>;
  readonly top: Maybe<Scalars['Float']>;
};

type SanityImageCropFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly bottom: InputMaybe<FieldSelectorEnum>;
  readonly left: InputMaybe<FieldSelectorEnum>;
  readonly right: InputMaybe<FieldSelectorEnum>;
  readonly top: InputMaybe<FieldSelectorEnum>;
};

type SanityImageCropFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly bottom: InputMaybe<FloatQueryOperatorInput>;
  readonly left: InputMaybe<FloatQueryOperatorInput>;
  readonly right: InputMaybe<FloatQueryOperatorInput>;
  readonly top: InputMaybe<FloatQueryOperatorInput>;
};

type SanityImageCropSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly bottom: InputMaybe<SortOrderEnum>;
  readonly left: InputMaybe<SortOrderEnum>;
  readonly right: InputMaybe<SortOrderEnum>;
  readonly top: InputMaybe<SortOrderEnum>;
};

type SanityImageDimensions = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Float']>;
  readonly width: Maybe<Scalars['Float']>;
};

type SanityImageDimensionsFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type SanityImageDimensionsFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type SanityImageDimensionsSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type SanityImageFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawAsset: InputMaybe<FieldSelectorEnum>;
  readonly _rawCrop: InputMaybe<FieldSelectorEnum>;
  readonly _rawHotspot: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly asset: InputMaybe<SanityImageAssetFieldSelector>;
  readonly crop: InputMaybe<SanityImageCropFieldSelector>;
  readonly hotspot: InputMaybe<SanityImageHotspotFieldSelector>;
};

type SanityImageFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawAsset: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawCrop: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawHotspot: InputMaybe<JSONQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly asset: InputMaybe<SanityImageAssetFilterInput>;
  readonly crop: InputMaybe<SanityImageCropFilterInput>;
  readonly hotspot: InputMaybe<SanityImageHotspotFilterInput>;
};

type SanityImageFilterListInput = {
  readonly elemMatch: InputMaybe<SanityImageFilterInput>;
};

type SanityImageFit =
  | 'clip'
  | 'crop'
  | 'fill'
  | 'fillmax'
  | 'max'
  | 'min'
  | 'scale';

type SanityImageHotspot = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Float']>;
  readonly width: Maybe<Scalars['Float']>;
  readonly x: Maybe<Scalars['Float']>;
  readonly y: Maybe<Scalars['Float']>;
};

type SanityImageHotspotFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
  readonly x: InputMaybe<FieldSelectorEnum>;
  readonly y: InputMaybe<FieldSelectorEnum>;
};

type SanityImageHotspotFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
  readonly x: InputMaybe<FloatQueryOperatorInput>;
  readonly y: InputMaybe<FloatQueryOperatorInput>;
};

type SanityImageHotspotSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
  readonly x: InputMaybe<SortOrderEnum>;
  readonly y: InputMaybe<SortOrderEnum>;
};

type SanityImageMetadata = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawDimensions: Maybe<Scalars['JSON']>;
  readonly _rawLocation: Maybe<Scalars['JSON']>;
  readonly _rawPalette: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly blurHash: Maybe<Scalars['String']>;
  readonly dimensions: Maybe<SanityImageDimensions>;
  readonly hasAlpha: Maybe<Scalars['Boolean']>;
  readonly isOpaque: Maybe<Scalars['Boolean']>;
  readonly location: Maybe<SanityGeopoint>;
  readonly lqip: Maybe<Scalars['String']>;
  readonly palette: Maybe<SanityImagePalette>;
};


type SanityImageMetadata__rawDimensionsArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityImageMetadata__rawLocationArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityImageMetadata__rawPaletteArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityImageMetadataFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawDimensions: InputMaybe<FieldSelectorEnum>;
  readonly _rawLocation: InputMaybe<FieldSelectorEnum>;
  readonly _rawPalette: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly blurHash: InputMaybe<FieldSelectorEnum>;
  readonly dimensions: InputMaybe<SanityImageDimensionsFieldSelector>;
  readonly hasAlpha: InputMaybe<FieldSelectorEnum>;
  readonly isOpaque: InputMaybe<FieldSelectorEnum>;
  readonly location: InputMaybe<SanityGeopointFieldSelector>;
  readonly lqip: InputMaybe<FieldSelectorEnum>;
  readonly palette: InputMaybe<SanityImagePaletteFieldSelector>;
};

type SanityImageMetadataFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawDimensions: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawLocation: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawPalette: InputMaybe<JSONQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly blurHash: InputMaybe<StringQueryOperatorInput>;
  readonly dimensions: InputMaybe<SanityImageDimensionsFilterInput>;
  readonly hasAlpha: InputMaybe<BooleanQueryOperatorInput>;
  readonly isOpaque: InputMaybe<BooleanQueryOperatorInput>;
  readonly location: InputMaybe<SanityGeopointFilterInput>;
  readonly lqip: InputMaybe<StringQueryOperatorInput>;
  readonly palette: InputMaybe<SanityImagePaletteFilterInput>;
};

type SanityImageMetadataSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawDimensions: InputMaybe<SortOrderEnum>;
  readonly _rawLocation: InputMaybe<SortOrderEnum>;
  readonly _rawPalette: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly blurHash: InputMaybe<SortOrderEnum>;
  readonly dimensions: InputMaybe<SanityImageDimensionsSortInput>;
  readonly hasAlpha: InputMaybe<SortOrderEnum>;
  readonly isOpaque: InputMaybe<SortOrderEnum>;
  readonly location: InputMaybe<SanityGeopointSortInput>;
  readonly lqip: InputMaybe<SortOrderEnum>;
  readonly palette: InputMaybe<SanityImagePaletteSortInput>;
};

type SanityImagePalette = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawDarkMuted: Maybe<Scalars['JSON']>;
  readonly _rawDarkVibrant: Maybe<Scalars['JSON']>;
  readonly _rawDominant: Maybe<Scalars['JSON']>;
  readonly _rawLightMuted: Maybe<Scalars['JSON']>;
  readonly _rawLightVibrant: Maybe<Scalars['JSON']>;
  readonly _rawMuted: Maybe<Scalars['JSON']>;
  readonly _rawVibrant: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly darkMuted: Maybe<SanityImagePaletteSwatch>;
  readonly darkVibrant: Maybe<SanityImagePaletteSwatch>;
  readonly dominant: Maybe<SanityImagePaletteSwatch>;
  readonly lightMuted: Maybe<SanityImagePaletteSwatch>;
  readonly lightVibrant: Maybe<SanityImagePaletteSwatch>;
  readonly muted: Maybe<SanityImagePaletteSwatch>;
  readonly vibrant: Maybe<SanityImagePaletteSwatch>;
};


type SanityImagePalette__rawDarkMutedArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityImagePalette__rawDarkVibrantArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityImagePalette__rawDominantArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityImagePalette__rawLightMutedArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityImagePalette__rawLightVibrantArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityImagePalette__rawMutedArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityImagePalette__rawVibrantArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityImagePaletteFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawDarkMuted: InputMaybe<FieldSelectorEnum>;
  readonly _rawDarkVibrant: InputMaybe<FieldSelectorEnum>;
  readonly _rawDominant: InputMaybe<FieldSelectorEnum>;
  readonly _rawLightMuted: InputMaybe<FieldSelectorEnum>;
  readonly _rawLightVibrant: InputMaybe<FieldSelectorEnum>;
  readonly _rawMuted: InputMaybe<FieldSelectorEnum>;
  readonly _rawVibrant: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly darkMuted: InputMaybe<SanityImagePaletteSwatchFieldSelector>;
  readonly darkVibrant: InputMaybe<SanityImagePaletteSwatchFieldSelector>;
  readonly dominant: InputMaybe<SanityImagePaletteSwatchFieldSelector>;
  readonly lightMuted: InputMaybe<SanityImagePaletteSwatchFieldSelector>;
  readonly lightVibrant: InputMaybe<SanityImagePaletteSwatchFieldSelector>;
  readonly muted: InputMaybe<SanityImagePaletteSwatchFieldSelector>;
  readonly vibrant: InputMaybe<SanityImagePaletteSwatchFieldSelector>;
};

type SanityImagePaletteFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawDarkMuted: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawDarkVibrant: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawDominant: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawLightMuted: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawLightVibrant: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawMuted: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawVibrant: InputMaybe<JSONQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly darkMuted: InputMaybe<SanityImagePaletteSwatchFilterInput>;
  readonly darkVibrant: InputMaybe<SanityImagePaletteSwatchFilterInput>;
  readonly dominant: InputMaybe<SanityImagePaletteSwatchFilterInput>;
  readonly lightMuted: InputMaybe<SanityImagePaletteSwatchFilterInput>;
  readonly lightVibrant: InputMaybe<SanityImagePaletteSwatchFilterInput>;
  readonly muted: InputMaybe<SanityImagePaletteSwatchFilterInput>;
  readonly vibrant: InputMaybe<SanityImagePaletteSwatchFilterInput>;
};

type SanityImagePaletteSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawDarkMuted: InputMaybe<SortOrderEnum>;
  readonly _rawDarkVibrant: InputMaybe<SortOrderEnum>;
  readonly _rawDominant: InputMaybe<SortOrderEnum>;
  readonly _rawLightMuted: InputMaybe<SortOrderEnum>;
  readonly _rawLightVibrant: InputMaybe<SortOrderEnum>;
  readonly _rawMuted: InputMaybe<SortOrderEnum>;
  readonly _rawVibrant: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly darkMuted: InputMaybe<SanityImagePaletteSwatchSortInput>;
  readonly darkVibrant: InputMaybe<SanityImagePaletteSwatchSortInput>;
  readonly dominant: InputMaybe<SanityImagePaletteSwatchSortInput>;
  readonly lightMuted: InputMaybe<SanityImagePaletteSwatchSortInput>;
  readonly lightVibrant: InputMaybe<SanityImagePaletteSwatchSortInput>;
  readonly muted: InputMaybe<SanityImagePaletteSwatchSortInput>;
  readonly vibrant: InputMaybe<SanityImagePaletteSwatchSortInput>;
};

type SanityImagePaletteSwatch = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly background: Maybe<Scalars['String']>;
  readonly foreground: Maybe<Scalars['String']>;
  readonly population: Maybe<Scalars['Float']>;
  readonly title: Maybe<Scalars['String']>;
};

type SanityImagePaletteSwatchFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly background: InputMaybe<FieldSelectorEnum>;
  readonly foreground: InputMaybe<FieldSelectorEnum>;
  readonly population: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SanityImagePaletteSwatchFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly background: InputMaybe<StringQueryOperatorInput>;
  readonly foreground: InputMaybe<StringQueryOperatorInput>;
  readonly population: InputMaybe<FloatQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SanityImagePaletteSwatchSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly background: InputMaybe<SortOrderEnum>;
  readonly foreground: InputMaybe<SortOrderEnum>;
  readonly population: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SanityImageSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawAsset: InputMaybe<SortOrderEnum>;
  readonly _rawCrop: InputMaybe<SortOrderEnum>;
  readonly _rawHotspot: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly asset: InputMaybe<SanityImageAssetSortInput>;
  readonly crop: InputMaybe<SanityImageCropSortInput>;
  readonly hotspot: InputMaybe<SanityImageHotspotSortInput>;
};

type SanityIndustry = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawIcon: Maybe<Scalars['JSON']>;
  readonly _rawName: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly icon: Maybe<ReadonlyArray<Maybe<SanityIcon>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly isic: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly naics: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly name: Maybe<SanityLocaleString>;
  readonly parent: Maybe<Node>;
  readonly sic: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
};


type SanityIndustry__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityIndustry__rawIconArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityIndustry__rawNameArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityIndustry__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityIndustryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityIndustryEdge>;
  readonly group: ReadonlyArray<SanityIndustryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityIndustry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityIndustryConnection_distinctArgs = {
  field: SanityIndustryFieldSelector;
};


type SanityIndustryConnection_groupArgs = {
  field: SanityIndustryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityIndustryConnection_maxArgs = {
  field: SanityIndustryFieldSelector;
};


type SanityIndustryConnection_minArgs = {
  field: SanityIndustryFieldSelector;
};


type SanityIndustryConnection_sumArgs = {
  field: SanityIndustryFieldSelector;
};

type SanityIndustryEdge = {
  readonly next: Maybe<SanityIndustry>;
  readonly node: SanityIndustry;
  readonly previous: Maybe<SanityIndustry>;
};

type SanityIndustryFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawIcon: InputMaybe<FieldSelectorEnum>;
  readonly _rawName: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly icon: InputMaybe<SanityIconFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly isic: InputMaybe<FieldSelectorEnum>;
  readonly naics: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<SanityLocaleStringFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sic: InputMaybe<FieldSelectorEnum>;
};

type SanityIndustryFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawName: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly icon: InputMaybe<SanityIconFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isic: InputMaybe<StringQueryOperatorInput>;
  readonly naics: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<SanityLocaleStringFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sic: InputMaybe<StringQueryOperatorInput>;
};

type SanityIndustryFilterListInput = {
  readonly elemMatch: InputMaybe<SanityIndustryFilterInput>;
};

type SanityIndustryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityIndustryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityIndustryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityIndustry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityIndustryGroupConnection_distinctArgs = {
  field: SanityIndustryFieldSelector;
};


type SanityIndustryGroupConnection_groupArgs = {
  field: SanityIndustryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityIndustryGroupConnection_maxArgs = {
  field: SanityIndustryFieldSelector;
};


type SanityIndustryGroupConnection_minArgs = {
  field: SanityIndustryFieldSelector;
};


type SanityIndustryGroupConnection_sumArgs = {
  field: SanityIndustryFieldSelector;
};

type SanityIndustrySortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawIcon: InputMaybe<SortOrderEnum>;
  readonly _rawName: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly icon: InputMaybe<SanityIconSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly isic: InputMaybe<SortOrderEnum>;
  readonly naics: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SanityLocaleStringSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sic: InputMaybe<SortOrderEnum>;
};

type SanityInput = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly placeholder: Maybe<Scalars['String']>;
};

type SanityListItems = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawImage: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly image: Maybe<SanityImage>;
  readonly title: Maybe<Scalars['String']>;
};


type SanityListItems__rawImageArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityLocaleString = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly en_CA: Maybe<Scalars['String']>;
  readonly en_US: Maybe<Scalars['String']>;
  readonly es_US: Maybe<Scalars['String']>;
  readonly fr_CA: Maybe<Scalars['String']>;
};

type SanityLocaleStringFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly en_CA: InputMaybe<FieldSelectorEnum>;
  readonly en_US: InputMaybe<FieldSelectorEnum>;
  readonly es_US: InputMaybe<FieldSelectorEnum>;
  readonly fr_CA: InputMaybe<FieldSelectorEnum>;
};

type SanityLocaleStringFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly en_CA: InputMaybe<StringQueryOperatorInput>;
  readonly en_US: InputMaybe<StringQueryOperatorInput>;
  readonly es_US: InputMaybe<StringQueryOperatorInput>;
  readonly fr_CA: InputMaybe<StringQueryOperatorInput>;
};

type SanityLocaleStringSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly en_CA: InputMaybe<SortOrderEnum>;
  readonly en_US: InputMaybe<SortOrderEnum>;
  readonly es_US: InputMaybe<SortOrderEnum>;
  readonly fr_CA: InputMaybe<SortOrderEnum>;
};

type SanityLocation = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawBrand: Maybe<Scalars['JSON']>;
  readonly _rawDepartments: Maybe<Scalars['JSON']>;
  readonly _rawEmployees: Maybe<Scalars['JSON']>;
  readonly _rawImage: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly address: Maybe<Scalars['String']>;
  readonly brand: Maybe<SanityBrand>;
  readonly children: ReadonlyArray<Node>;
  readonly code: Maybe<Scalars['String']>;
  readonly departments: Maybe<ReadonlyArray<Maybe<SanityDepartment>>>;
  readonly employees: Maybe<ReadonlyArray<Maybe<SanityStaff>>>;
  readonly financeRoute: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<SanityIcon>;
  readonly internal: Internal;
  readonly locationId: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly scheduleURL: Maybe<Scalars['String']>;
  readonly sellURL: Maybe<Scalars['String']>;
  readonly serviceSpecialsRoute: Maybe<Scalars['String']>;
  readonly visibleOnSite: Maybe<Scalars['Boolean']>;
  readonly website: Maybe<Scalars['String']>;
};


type SanityLocation__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityLocation__rawBrandArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityLocation__rawDepartmentsArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityLocation__rawEmployeesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityLocation__rawImageArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityLocation__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityLocationConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityLocationEdge>;
  readonly group: ReadonlyArray<SanityLocationGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityLocation>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityLocationConnection_distinctArgs = {
  field: SanityLocationFieldSelector;
};


type SanityLocationConnection_groupArgs = {
  field: SanityLocationFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityLocationConnection_maxArgs = {
  field: SanityLocationFieldSelector;
};


type SanityLocationConnection_minArgs = {
  field: SanityLocationFieldSelector;
};


type SanityLocationConnection_sumArgs = {
  field: SanityLocationFieldSelector;
};

type SanityLocationEdge = {
  readonly next: Maybe<SanityLocation>;
  readonly node: SanityLocation;
  readonly previous: Maybe<SanityLocation>;
};

type SanityLocationFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawBrand: InputMaybe<FieldSelectorEnum>;
  readonly _rawDepartments: InputMaybe<FieldSelectorEnum>;
  readonly _rawEmployees: InputMaybe<FieldSelectorEnum>;
  readonly _rawImage: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly address: InputMaybe<FieldSelectorEnum>;
  readonly brand: InputMaybe<SanityBrandFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly departments: InputMaybe<SanityDepartmentFieldSelector>;
  readonly employees: InputMaybe<SanityStaffFieldSelector>;
  readonly financeRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<SanityIconFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locationId: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly scheduleURL: InputMaybe<FieldSelectorEnum>;
  readonly sellURL: InputMaybe<FieldSelectorEnum>;
  readonly serviceSpecialsRoute: InputMaybe<FieldSelectorEnum>;
  readonly visibleOnSite: InputMaybe<FieldSelectorEnum>;
  readonly website: InputMaybe<FieldSelectorEnum>;
};

type SanityLocationFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawDepartments: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawEmployees: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawImage: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly address: InputMaybe<StringQueryOperatorInput>;
  readonly brand: InputMaybe<SanityBrandFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly code: InputMaybe<StringQueryOperatorInput>;
  readonly departments: InputMaybe<SanityDepartmentFilterListInput>;
  readonly employees: InputMaybe<SanityStaffFilterListInput>;
  readonly financeRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<SanityIconFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locationId: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly scheduleURL: InputMaybe<StringQueryOperatorInput>;
  readonly sellURL: InputMaybe<StringQueryOperatorInput>;
  readonly serviceSpecialsRoute: InputMaybe<StringQueryOperatorInput>;
  readonly visibleOnSite: InputMaybe<BooleanQueryOperatorInput>;
  readonly website: InputMaybe<StringQueryOperatorInput>;
};

type SanityLocationGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityLocationEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityLocationGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityLocation>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityLocationGroupConnection_distinctArgs = {
  field: SanityLocationFieldSelector;
};


type SanityLocationGroupConnection_groupArgs = {
  field: SanityLocationFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityLocationGroupConnection_maxArgs = {
  field: SanityLocationFieldSelector;
};


type SanityLocationGroupConnection_minArgs = {
  field: SanityLocationFieldSelector;
};


type SanityLocationGroupConnection_sumArgs = {
  field: SanityLocationFieldSelector;
};

type SanityLocationSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawBrand: InputMaybe<SortOrderEnum>;
  readonly _rawDepartments: InputMaybe<SortOrderEnum>;
  readonly _rawEmployees: InputMaybe<SortOrderEnum>;
  readonly _rawImage: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly address: InputMaybe<SortOrderEnum>;
  readonly brand: InputMaybe<SanityBrandSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly departments: InputMaybe<SanityDepartmentSortInput>;
  readonly employees: InputMaybe<SanityStaffSortInput>;
  readonly financeRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SanityIconSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locationId: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly scheduleURL: InputMaybe<SortOrderEnum>;
  readonly sellURL: InputMaybe<SortOrderEnum>;
  readonly serviceSpecialsRoute: InputMaybe<SortOrderEnum>;
  readonly visibleOnSite: InputMaybe<SortOrderEnum>;
  readonly website: InputMaybe<SortOrderEnum>;
};

type SanityLogo = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawIcon: Maybe<Scalars['JSON']>;
  readonly _rawSvg: Maybe<Scalars['JSON']>;
  readonly _rawSvgLight: Maybe<Scalars['JSON']>;
  readonly _rawWordmark: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly icon: Maybe<SanityImage>;
  readonly svg: Maybe<SanityImage>;
  readonly svgLight: Maybe<SanityImage>;
  readonly wordmark: Maybe<SanityImage>;
};


type SanityLogo__rawIconArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityLogo__rawSvgArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityLogo__rawSvgLightArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityLogo__rawWordmarkArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityLogoFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawIcon: InputMaybe<FieldSelectorEnum>;
  readonly _rawSvg: InputMaybe<FieldSelectorEnum>;
  readonly _rawSvgLight: InputMaybe<FieldSelectorEnum>;
  readonly _rawWordmark: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<SanityImageFieldSelector>;
  readonly svg: InputMaybe<SanityImageFieldSelector>;
  readonly svgLight: InputMaybe<SanityImageFieldSelector>;
  readonly wordmark: InputMaybe<SanityImageFieldSelector>;
};

type SanityLogoFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawSvg: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawSvgLight: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawWordmark: InputMaybe<JSONQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<SanityImageFilterInput>;
  readonly svg: InputMaybe<SanityImageFilterInput>;
  readonly svgLight: InputMaybe<SanityImageFilterInput>;
  readonly wordmark: InputMaybe<SanityImageFilterInput>;
};

type SanityLogoSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawIcon: InputMaybe<SortOrderEnum>;
  readonly _rawSvg: InputMaybe<SortOrderEnum>;
  readonly _rawSvgLight: InputMaybe<SortOrderEnum>;
  readonly _rawWordmark: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<SanityImageSortInput>;
  readonly svg: InputMaybe<SanityImageSortInput>;
  readonly svgLight: InputMaybe<SanityImageSortInput>;
  readonly wordmark: InputMaybe<SanityImageSortInput>;
};

type SanityModel = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawBrand: Maybe<Scalars['JSON']>;
  readonly _rawImages: Maybe<Scalars['JSON']>;
  readonly _rawStockImages: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly brand: Maybe<SanityBrand>;
  readonly cab_type: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly colour_ext: Maybe<Scalars['String']>;
  readonly colour_ext_code: Maybe<Scalars['String']>;
  readonly colour_ext_hex: Maybe<Scalars['String']>;
  readonly colour_int: Maybe<Scalars['String']>;
  readonly colour_int_code: Maybe<Scalars['String']>;
  readonly colour_int_hex: Maybe<Scalars['String']>;
  readonly cylinders: Maybe<Scalars['Float']>;
  readonly displacement: Maybe<Scalars['String']>;
  readonly doors: Maybe<Scalars['Float']>;
  readonly drivetrain: Maybe<Scalars['String']>;
  readonly fuel_type: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly id_chrome: Maybe<Scalars['String']>;
  readonly id_kbb_trim: Maybe<Scalars['String']>;
  readonly images: Maybe<ReadonlyArray<Maybe<SanityImage>>>;
  readonly internal: Internal;
  readonly make: Maybe<Scalars['String']>;
  readonly model: Maybe<Scalars['String']>;
  readonly model_trim: Maybe<Scalars['String']>;
  readonly mpg_city: Maybe<Scalars['Float']>;
  readonly mpg_highway: Maybe<Scalars['Float']>;
  readonly oem_code: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly per_litre_city: Maybe<Scalars['Float']>;
  readonly per_litre_hwy: Maybe<Scalars['Float']>;
  readonly stock_images: Maybe<ReadonlyArray<Maybe<SanityImage>>>;
  readonly transmission: Maybe<Scalars['String']>;
  readonly trim_detail: Maybe<Scalars['String']>;
  readonly vins: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly year: Maybe<Scalars['Float']>;
};


type SanityModel__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityModel__rawBrandArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityModel__rawImagesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityModel__rawStockImagesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityModel__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityModelConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityModelEdge>;
  readonly group: ReadonlyArray<SanityModelGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityModel>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityModelConnection_distinctArgs = {
  field: SanityModelFieldSelector;
};


type SanityModelConnection_groupArgs = {
  field: SanityModelFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityModelConnection_maxArgs = {
  field: SanityModelFieldSelector;
};


type SanityModelConnection_minArgs = {
  field: SanityModelFieldSelector;
};


type SanityModelConnection_sumArgs = {
  field: SanityModelFieldSelector;
};

type SanityModelEdge = {
  readonly next: Maybe<SanityModel>;
  readonly node: SanityModel;
  readonly previous: Maybe<SanityModel>;
};

type SanityModelFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawBrand: InputMaybe<FieldSelectorEnum>;
  readonly _rawImages: InputMaybe<FieldSelectorEnum>;
  readonly _rawStockImages: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly brand: InputMaybe<SanityBrandFieldSelector>;
  readonly cab_type: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly colour_ext: InputMaybe<FieldSelectorEnum>;
  readonly colour_ext_code: InputMaybe<FieldSelectorEnum>;
  readonly colour_ext_hex: InputMaybe<FieldSelectorEnum>;
  readonly colour_int: InputMaybe<FieldSelectorEnum>;
  readonly colour_int_code: InputMaybe<FieldSelectorEnum>;
  readonly colour_int_hex: InputMaybe<FieldSelectorEnum>;
  readonly cylinders: InputMaybe<FieldSelectorEnum>;
  readonly displacement: InputMaybe<FieldSelectorEnum>;
  readonly doors: InputMaybe<FieldSelectorEnum>;
  readonly drivetrain: InputMaybe<FieldSelectorEnum>;
  readonly fuel_type: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly id_chrome: InputMaybe<FieldSelectorEnum>;
  readonly id_kbb_trim: InputMaybe<FieldSelectorEnum>;
  readonly images: InputMaybe<SanityImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly make: InputMaybe<FieldSelectorEnum>;
  readonly model: InputMaybe<FieldSelectorEnum>;
  readonly model_trim: InputMaybe<FieldSelectorEnum>;
  readonly mpg_city: InputMaybe<FieldSelectorEnum>;
  readonly mpg_highway: InputMaybe<FieldSelectorEnum>;
  readonly oem_code: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly per_litre_city: InputMaybe<FieldSelectorEnum>;
  readonly per_litre_hwy: InputMaybe<FieldSelectorEnum>;
  readonly stock_images: InputMaybe<SanityImageFieldSelector>;
  readonly transmission: InputMaybe<FieldSelectorEnum>;
  readonly trim_detail: InputMaybe<FieldSelectorEnum>;
  readonly vins: InputMaybe<FieldSelectorEnum>;
  readonly year: InputMaybe<FieldSelectorEnum>;
};

type SanityModelFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawImages: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawStockImages: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly brand: InputMaybe<SanityBrandFilterInput>;
  readonly cab_type: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly colour_ext: InputMaybe<StringQueryOperatorInput>;
  readonly colour_ext_code: InputMaybe<StringQueryOperatorInput>;
  readonly colour_ext_hex: InputMaybe<StringQueryOperatorInput>;
  readonly colour_int: InputMaybe<StringQueryOperatorInput>;
  readonly colour_int_code: InputMaybe<StringQueryOperatorInput>;
  readonly colour_int_hex: InputMaybe<StringQueryOperatorInput>;
  readonly cylinders: InputMaybe<FloatQueryOperatorInput>;
  readonly displacement: InputMaybe<StringQueryOperatorInput>;
  readonly doors: InputMaybe<FloatQueryOperatorInput>;
  readonly drivetrain: InputMaybe<StringQueryOperatorInput>;
  readonly fuel_type: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly id_chrome: InputMaybe<StringQueryOperatorInput>;
  readonly id_kbb_trim: InputMaybe<StringQueryOperatorInput>;
  readonly images: InputMaybe<SanityImageFilterListInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly make: InputMaybe<StringQueryOperatorInput>;
  readonly model: InputMaybe<StringQueryOperatorInput>;
  readonly model_trim: InputMaybe<StringQueryOperatorInput>;
  readonly mpg_city: InputMaybe<FloatQueryOperatorInput>;
  readonly mpg_highway: InputMaybe<FloatQueryOperatorInput>;
  readonly oem_code: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly per_litre_city: InputMaybe<FloatQueryOperatorInput>;
  readonly per_litre_hwy: InputMaybe<FloatQueryOperatorInput>;
  readonly stock_images: InputMaybe<SanityImageFilterListInput>;
  readonly transmission: InputMaybe<StringQueryOperatorInput>;
  readonly trim_detail: InputMaybe<StringQueryOperatorInput>;
  readonly vins: InputMaybe<StringQueryOperatorInput>;
  readonly year: InputMaybe<FloatQueryOperatorInput>;
};

type SanityModelGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityModelEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityModelGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityModel>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityModelGroupConnection_distinctArgs = {
  field: SanityModelFieldSelector;
};


type SanityModelGroupConnection_groupArgs = {
  field: SanityModelFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityModelGroupConnection_maxArgs = {
  field: SanityModelFieldSelector;
};


type SanityModelGroupConnection_minArgs = {
  field: SanityModelFieldSelector;
};


type SanityModelGroupConnection_sumArgs = {
  field: SanityModelFieldSelector;
};

type SanityModelSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawBrand: InputMaybe<SortOrderEnum>;
  readonly _rawImages: InputMaybe<SortOrderEnum>;
  readonly _rawStockImages: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly brand: InputMaybe<SanityBrandSortInput>;
  readonly cab_type: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly colour_ext: InputMaybe<SortOrderEnum>;
  readonly colour_ext_code: InputMaybe<SortOrderEnum>;
  readonly colour_ext_hex: InputMaybe<SortOrderEnum>;
  readonly colour_int: InputMaybe<SortOrderEnum>;
  readonly colour_int_code: InputMaybe<SortOrderEnum>;
  readonly colour_int_hex: InputMaybe<SortOrderEnum>;
  readonly cylinders: InputMaybe<SortOrderEnum>;
  readonly displacement: InputMaybe<SortOrderEnum>;
  readonly doors: InputMaybe<SortOrderEnum>;
  readonly drivetrain: InputMaybe<SortOrderEnum>;
  readonly fuel_type: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly id_chrome: InputMaybe<SortOrderEnum>;
  readonly id_kbb_trim: InputMaybe<SortOrderEnum>;
  readonly images: InputMaybe<SanityImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly make: InputMaybe<SortOrderEnum>;
  readonly model: InputMaybe<SortOrderEnum>;
  readonly model_trim: InputMaybe<SortOrderEnum>;
  readonly mpg_city: InputMaybe<SortOrderEnum>;
  readonly mpg_highway: InputMaybe<SortOrderEnum>;
  readonly oem_code: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly per_litre_city: InputMaybe<SortOrderEnum>;
  readonly per_litre_hwy: InputMaybe<SortOrderEnum>;
  readonly stock_images: InputMaybe<SanityImageSortInput>;
  readonly transmission: InputMaybe<SortOrderEnum>;
  readonly trim_detail: InputMaybe<SortOrderEnum>;
  readonly vins: InputMaybe<SortOrderEnum>;
  readonly year: InputMaybe<SortOrderEnum>;
};

type SanityNamespace = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawBrand: Maybe<Scalars['JSON']>;
  readonly _rawEntity: Maybe<Scalars['JSON']>;
  readonly _rawIcon: Maybe<Scalars['JSON']>;
  readonly _rawName: Maybe<Scalars['JSON']>;
  readonly _rawNameFull: Maybe<Scalars['JSON']>;
  readonly _rawSupplier: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly brand: Maybe<SanityBrand>;
  readonly children: ReadonlyArray<Node>;
  readonly code: Maybe<Scalars['String']>;
  readonly entity: Maybe<SanityEntity>;
  readonly icon: Maybe<SanityIcon>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<SanityLocaleString>;
  readonly name_full: Maybe<SanityLocaleString>;
  readonly parent: Maybe<Node>;
  readonly supplier: Maybe<SanityEntity>;
  readonly touchless_id: Maybe<Scalars['String']>;
};


type SanityNamespace__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityNamespace__rawBrandArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityNamespace__rawEntityArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityNamespace__rawIconArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityNamespace__rawNameArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityNamespace__rawNameFullArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityNamespace__rawSupplierArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityNamespace__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityNamespaceConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityNamespaceEdge>;
  readonly group: ReadonlyArray<SanityNamespaceGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityNamespace>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityNamespaceConnection_distinctArgs = {
  field: SanityNamespaceFieldSelector;
};


type SanityNamespaceConnection_groupArgs = {
  field: SanityNamespaceFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityNamespaceConnection_maxArgs = {
  field: SanityNamespaceFieldSelector;
};


type SanityNamespaceConnection_minArgs = {
  field: SanityNamespaceFieldSelector;
};


type SanityNamespaceConnection_sumArgs = {
  field: SanityNamespaceFieldSelector;
};

type SanityNamespaceEdge = {
  readonly next: Maybe<SanityNamespace>;
  readonly node: SanityNamespace;
  readonly previous: Maybe<SanityNamespace>;
};

type SanityNamespaceFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawBrand: InputMaybe<FieldSelectorEnum>;
  readonly _rawEntity: InputMaybe<FieldSelectorEnum>;
  readonly _rawIcon: InputMaybe<FieldSelectorEnum>;
  readonly _rawName: InputMaybe<FieldSelectorEnum>;
  readonly _rawNameFull: InputMaybe<FieldSelectorEnum>;
  readonly _rawSupplier: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly brand: InputMaybe<SanityBrandFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly entity: InputMaybe<SanityEntityFieldSelector>;
  readonly icon: InputMaybe<SanityIconFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<SanityLocaleStringFieldSelector>;
  readonly name_full: InputMaybe<SanityLocaleStringFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly supplier: InputMaybe<SanityEntityFieldSelector>;
  readonly touchless_id: InputMaybe<FieldSelectorEnum>;
};

type SanityNamespaceFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawEntity: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawIcon: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawName: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawNameFull: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawSupplier: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly brand: InputMaybe<SanityBrandFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly code: InputMaybe<StringQueryOperatorInput>;
  readonly entity: InputMaybe<SanityEntityFilterInput>;
  readonly icon: InputMaybe<SanityIconFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<SanityLocaleStringFilterInput>;
  readonly name_full: InputMaybe<SanityLocaleStringFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly supplier: InputMaybe<SanityEntityFilterInput>;
  readonly touchless_id: InputMaybe<StringQueryOperatorInput>;
};

type SanityNamespaceGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityNamespaceEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityNamespaceGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityNamespace>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityNamespaceGroupConnection_distinctArgs = {
  field: SanityNamespaceFieldSelector;
};


type SanityNamespaceGroupConnection_groupArgs = {
  field: SanityNamespaceFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityNamespaceGroupConnection_maxArgs = {
  field: SanityNamespaceFieldSelector;
};


type SanityNamespaceGroupConnection_minArgs = {
  field: SanityNamespaceFieldSelector;
};


type SanityNamespaceGroupConnection_sumArgs = {
  field: SanityNamespaceFieldSelector;
};

type SanityNamespaceSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawBrand: InputMaybe<SortOrderEnum>;
  readonly _rawEntity: InputMaybe<SortOrderEnum>;
  readonly _rawIcon: InputMaybe<SortOrderEnum>;
  readonly _rawName: InputMaybe<SortOrderEnum>;
  readonly _rawNameFull: InputMaybe<SortOrderEnum>;
  readonly _rawSupplier: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly brand: InputMaybe<SanityBrandSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly entity: InputMaybe<SanityEntitySortInput>;
  readonly icon: InputMaybe<SanityIconSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SanityLocaleStringSortInput>;
  readonly name_full: InputMaybe<SanityLocaleStringSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly supplier: InputMaybe<SanityEntitySortInput>;
  readonly touchless_id: InputMaybe<SortOrderEnum>;
};

type SanityRedirect = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly force: Maybe<Scalars['Boolean']>;
  readonly from: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly permanent: Maybe<Scalars['Boolean']>;
  readonly status_code: Maybe<Scalars['String']>;
  readonly to: Maybe<Scalars['String']>;
};


type SanityRedirect__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityRedirect__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityRedirectConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityRedirectEdge>;
  readonly group: ReadonlyArray<SanityRedirectGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityRedirect>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityRedirectConnection_distinctArgs = {
  field: SanityRedirectFieldSelector;
};


type SanityRedirectConnection_groupArgs = {
  field: SanityRedirectFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityRedirectConnection_maxArgs = {
  field: SanityRedirectFieldSelector;
};


type SanityRedirectConnection_minArgs = {
  field: SanityRedirectFieldSelector;
};


type SanityRedirectConnection_sumArgs = {
  field: SanityRedirectFieldSelector;
};

type SanityRedirectEdge = {
  readonly next: Maybe<SanityRedirect>;
  readonly node: SanityRedirect;
  readonly previous: Maybe<SanityRedirect>;
};

type SanityRedirectFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly force: InputMaybe<FieldSelectorEnum>;
  readonly from: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly permanent: InputMaybe<FieldSelectorEnum>;
  readonly status_code: InputMaybe<FieldSelectorEnum>;
  readonly to: InputMaybe<FieldSelectorEnum>;
};

type SanityRedirectFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly force: InputMaybe<BooleanQueryOperatorInput>;
  readonly from: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly permanent: InputMaybe<BooleanQueryOperatorInput>;
  readonly status_code: InputMaybe<StringQueryOperatorInput>;
  readonly to: InputMaybe<StringQueryOperatorInput>;
};

type SanityRedirectGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityRedirectEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityRedirectGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityRedirect>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityRedirectGroupConnection_distinctArgs = {
  field: SanityRedirectFieldSelector;
};


type SanityRedirectGroupConnection_groupArgs = {
  field: SanityRedirectFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityRedirectGroupConnection_maxArgs = {
  field: SanityRedirectFieldSelector;
};


type SanityRedirectGroupConnection_minArgs = {
  field: SanityRedirectFieldSelector;
};


type SanityRedirectGroupConnection_sumArgs = {
  field: SanityRedirectFieldSelector;
};

type SanityRedirectSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly force: InputMaybe<SortOrderEnum>;
  readonly from: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly permanent: InputMaybe<SortOrderEnum>;
  readonly status_code: InputMaybe<SortOrderEnum>;
  readonly to: InputMaybe<SortOrderEnum>;
};

type SanityResolveReferencesConfiguration = {
  /** Max depth to resolve references to */
  readonly maxDepth: Scalars['Int'];
};

type SanityReview = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawAvatar: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly avatar: Maybe<SanityImage>;
  readonly children: ReadonlyArray<Node>;
  readonly comment: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly location_id: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly published_at: Maybe<Scalars['Date']>;
  readonly publisher_id: Maybe<Scalars['String']>;
  readonly rating: Maybe<Scalars['Float']>;
  readonly status: Maybe<Scalars['String']>;
  readonly tags: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};


type SanityReview__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityReview__rawAvatarArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityReview__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityReview_published_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityReviewConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityReviewEdge>;
  readonly group: ReadonlyArray<SanityReviewGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityReview>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityReviewConnection_distinctArgs = {
  field: SanityReviewFieldSelector;
};


type SanityReviewConnection_groupArgs = {
  field: SanityReviewFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityReviewConnection_maxArgs = {
  field: SanityReviewFieldSelector;
};


type SanityReviewConnection_minArgs = {
  field: SanityReviewFieldSelector;
};


type SanityReviewConnection_sumArgs = {
  field: SanityReviewFieldSelector;
};

type SanityReviewEdge = {
  readonly next: Maybe<SanityReview>;
  readonly node: SanityReview;
  readonly previous: Maybe<SanityReview>;
};

type SanityReviewFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawAvatar: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly avatar: InputMaybe<SanityImageFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly comment: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly location_id: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly published_at: InputMaybe<FieldSelectorEnum>;
  readonly publisher_id: InputMaybe<FieldSelectorEnum>;
  readonly rating: InputMaybe<FieldSelectorEnum>;
  readonly status: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SanityReviewFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawAvatar: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly avatar: InputMaybe<SanityImageFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly comment: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly location_id: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly published_at: InputMaybe<DateQueryOperatorInput>;
  readonly publisher_id: InputMaybe<StringQueryOperatorInput>;
  readonly rating: InputMaybe<FloatQueryOperatorInput>;
  readonly status: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SanityReviewGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityReviewEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityReviewGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityReview>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityReviewGroupConnection_distinctArgs = {
  field: SanityReviewFieldSelector;
};


type SanityReviewGroupConnection_groupArgs = {
  field: SanityReviewFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityReviewGroupConnection_maxArgs = {
  field: SanityReviewFieldSelector;
};


type SanityReviewGroupConnection_minArgs = {
  field: SanityReviewFieldSelector;
};


type SanityReviewGroupConnection_sumArgs = {
  field: SanityReviewFieldSelector;
};

type SanityReviewSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawAvatar: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly avatar: InputMaybe<SanityImageSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly comment: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly location_id: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly published_at: InputMaybe<SortOrderEnum>;
  readonly publisher_id: InputMaybe<SortOrderEnum>;
  readonly rating: InputMaybe<SortOrderEnum>;
  readonly status: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SanityRule = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly type: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
};


type SanityRule__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityRule__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityRuleConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityRuleEdge>;
  readonly group: ReadonlyArray<SanityRuleGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityRule>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityRuleConnection_distinctArgs = {
  field: SanityRuleFieldSelector;
};


type SanityRuleConnection_groupArgs = {
  field: SanityRuleFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityRuleConnection_maxArgs = {
  field: SanityRuleFieldSelector;
};


type SanityRuleConnection_minArgs = {
  field: SanityRuleFieldSelector;
};


type SanityRuleConnection_sumArgs = {
  field: SanityRuleFieldSelector;
};

type SanityRuleEdge = {
  readonly next: Maybe<SanityRule>;
  readonly node: SanityRule;
  readonly previous: Maybe<SanityRule>;
};

type SanityRuleFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type SanityRuleFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type SanityRuleGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityRuleEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityRuleGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityRule>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityRuleGroupConnection_distinctArgs = {
  field: SanityRuleFieldSelector;
};


type SanityRuleGroupConnection_groupArgs = {
  field: SanityRuleFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityRuleGroupConnection_maxArgs = {
  field: SanityRuleFieldSelector;
};


type SanityRuleGroupConnection_minArgs = {
  field: SanityRuleFieldSelector;
};


type SanityRuleGroupConnection_sumArgs = {
  field: SanityRuleFieldSelector;
};

type SanityRuleSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type SanitySlug = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly current: Maybe<Scalars['String']>;
};

type SanitySlugFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly current: InputMaybe<FieldSelectorEnum>;
};

type SanitySlugFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly current: InputMaybe<StringQueryOperatorInput>;
};

type SanitySlugSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly current: InputMaybe<SortOrderEnum>;
};

type SanitySpacer = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly spacing: Maybe<Scalars['Float']>;
};

type SanitySpan = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly marks: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly text: Maybe<Scalars['String']>;
};

type SanitySpanFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly marks: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type SanitySpanFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly marks: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type SanitySpanFilterListInput = {
  readonly elemMatch: InputMaybe<SanitySpanFilterInput>;
};

type SanitySpanSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly marks: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type SanityStaff = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawImage: Maybe<Scalars['JSON']>;
  readonly _rawLanguages: Maybe<Scalars['JSON']>;
  readonly _rawLocation: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly companyCode: Maybe<Scalars['String']>;
  readonly companyId: Maybe<Scalars['String']>;
  readonly departmentCode: Maybe<Scalars['String']>;
  readonly departmentName: Maybe<Scalars['String']>;
  readonly dreamCar: Maybe<Scalars['String']>;
  readonly employeeId: Maybe<Scalars['String']>;
  readonly favFood: Maybe<Scalars['String']>;
  readonly favMusic: Maybe<Scalars['String']>;
  readonly favShow: Maybe<Scalars['String']>;
  readonly firstCar: Maybe<Scalars['String']>;
  readonly firstName: Maybe<Scalars['String']>;
  readonly gender: Maybe<Scalars['String']>;
  readonly homeTown: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<SanityImage>;
  readonly internal: Internal;
  readonly jobDescription: Maybe<Scalars['String']>;
  readonly languages: Maybe<ReadonlyArray<Maybe<SanityTag>>>;
  readonly lastBook: Maybe<Scalars['String']>;
  readonly lastName: Maybe<Scalars['String']>;
  readonly location: Maybe<SanityLocation>;
  readonly locationCode: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly personalEmail: Maybe<Scalars['String']>;
  readonly personalPhoneNumber: Maybe<Scalars['String']>;
  readonly photoURL: Maybe<Scalars['String']>;
  readonly pineappleOnPizza: Maybe<Scalars['Boolean']>;
  readonly placeToTravel: Maybe<Scalars['String']>;
  readonly preferredName: Maybe<Scalars['String']>;
  readonly shirtSize: Maybe<Scalars['String']>;
  readonly visibleOnSite: Maybe<Scalars['Boolean']>;
  readonly workEmail: Maybe<Scalars['String']>;
  readonly workPhoneNumber: Maybe<Scalars['String']>;
};


type SanityStaff__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityStaff__rawImageArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityStaff__rawLanguagesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityStaff__rawLocationArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityStaff__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityStaffConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityStaffEdge>;
  readonly group: ReadonlyArray<SanityStaffGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityStaff>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityStaffConnection_distinctArgs = {
  field: SanityStaffFieldSelector;
};


type SanityStaffConnection_groupArgs = {
  field: SanityStaffFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityStaffConnection_maxArgs = {
  field: SanityStaffFieldSelector;
};


type SanityStaffConnection_minArgs = {
  field: SanityStaffFieldSelector;
};


type SanityStaffConnection_sumArgs = {
  field: SanityStaffFieldSelector;
};

type SanityStaffEdge = {
  readonly next: Maybe<SanityStaff>;
  readonly node: SanityStaff;
  readonly previous: Maybe<SanityStaff>;
};

type SanityStaffFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawImage: InputMaybe<FieldSelectorEnum>;
  readonly _rawLanguages: InputMaybe<FieldSelectorEnum>;
  readonly _rawLocation: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly companyCode: InputMaybe<FieldSelectorEnum>;
  readonly companyId: InputMaybe<FieldSelectorEnum>;
  readonly departmentCode: InputMaybe<FieldSelectorEnum>;
  readonly departmentName: InputMaybe<FieldSelectorEnum>;
  readonly dreamCar: InputMaybe<FieldSelectorEnum>;
  readonly employeeId: InputMaybe<FieldSelectorEnum>;
  readonly favFood: InputMaybe<FieldSelectorEnum>;
  readonly favMusic: InputMaybe<FieldSelectorEnum>;
  readonly favShow: InputMaybe<FieldSelectorEnum>;
  readonly firstCar: InputMaybe<FieldSelectorEnum>;
  readonly firstName: InputMaybe<FieldSelectorEnum>;
  readonly gender: InputMaybe<FieldSelectorEnum>;
  readonly homeTown: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<SanityImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jobDescription: InputMaybe<FieldSelectorEnum>;
  readonly languages: InputMaybe<SanityTagFieldSelector>;
  readonly lastBook: InputMaybe<FieldSelectorEnum>;
  readonly lastName: InputMaybe<FieldSelectorEnum>;
  readonly location: InputMaybe<SanityLocationFieldSelector>;
  readonly locationCode: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly personalEmail: InputMaybe<FieldSelectorEnum>;
  readonly personalPhoneNumber: InputMaybe<FieldSelectorEnum>;
  readonly photoURL: InputMaybe<FieldSelectorEnum>;
  readonly pineappleOnPizza: InputMaybe<FieldSelectorEnum>;
  readonly placeToTravel: InputMaybe<FieldSelectorEnum>;
  readonly preferredName: InputMaybe<FieldSelectorEnum>;
  readonly shirtSize: InputMaybe<FieldSelectorEnum>;
  readonly visibleOnSite: InputMaybe<FieldSelectorEnum>;
  readonly workEmail: InputMaybe<FieldSelectorEnum>;
  readonly workPhoneNumber: InputMaybe<FieldSelectorEnum>;
};

type SanityStaffFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawImage: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawLanguages: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawLocation: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly companyCode: InputMaybe<StringQueryOperatorInput>;
  readonly companyId: InputMaybe<StringQueryOperatorInput>;
  readonly departmentCode: InputMaybe<StringQueryOperatorInput>;
  readonly departmentName: InputMaybe<StringQueryOperatorInput>;
  readonly dreamCar: InputMaybe<StringQueryOperatorInput>;
  readonly employeeId: InputMaybe<StringQueryOperatorInput>;
  readonly favFood: InputMaybe<StringQueryOperatorInput>;
  readonly favMusic: InputMaybe<StringQueryOperatorInput>;
  readonly favShow: InputMaybe<StringQueryOperatorInput>;
  readonly firstCar: InputMaybe<StringQueryOperatorInput>;
  readonly firstName: InputMaybe<StringQueryOperatorInput>;
  readonly gender: InputMaybe<StringQueryOperatorInput>;
  readonly homeTown: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<SanityImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jobDescription: InputMaybe<StringQueryOperatorInput>;
  readonly languages: InputMaybe<SanityTagFilterListInput>;
  readonly lastBook: InputMaybe<StringQueryOperatorInput>;
  readonly lastName: InputMaybe<StringQueryOperatorInput>;
  readonly location: InputMaybe<SanityLocationFilterInput>;
  readonly locationCode: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly personalEmail: InputMaybe<StringQueryOperatorInput>;
  readonly personalPhoneNumber: InputMaybe<StringQueryOperatorInput>;
  readonly photoURL: InputMaybe<StringQueryOperatorInput>;
  readonly pineappleOnPizza: InputMaybe<BooleanQueryOperatorInput>;
  readonly placeToTravel: InputMaybe<StringQueryOperatorInput>;
  readonly preferredName: InputMaybe<StringQueryOperatorInput>;
  readonly shirtSize: InputMaybe<StringQueryOperatorInput>;
  readonly visibleOnSite: InputMaybe<BooleanQueryOperatorInput>;
  readonly workEmail: InputMaybe<StringQueryOperatorInput>;
  readonly workPhoneNumber: InputMaybe<StringQueryOperatorInput>;
};

type SanityStaffFilterListInput = {
  readonly elemMatch: InputMaybe<SanityStaffFilterInput>;
};

type SanityStaffGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityStaffEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityStaffGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityStaff>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityStaffGroupConnection_distinctArgs = {
  field: SanityStaffFieldSelector;
};


type SanityStaffGroupConnection_groupArgs = {
  field: SanityStaffFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityStaffGroupConnection_maxArgs = {
  field: SanityStaffFieldSelector;
};


type SanityStaffGroupConnection_minArgs = {
  field: SanityStaffFieldSelector;
};


type SanityStaffGroupConnection_sumArgs = {
  field: SanityStaffFieldSelector;
};

type SanityStaffSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawImage: InputMaybe<SortOrderEnum>;
  readonly _rawLanguages: InputMaybe<SortOrderEnum>;
  readonly _rawLocation: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly companyCode: InputMaybe<SortOrderEnum>;
  readonly companyId: InputMaybe<SortOrderEnum>;
  readonly departmentCode: InputMaybe<SortOrderEnum>;
  readonly departmentName: InputMaybe<SortOrderEnum>;
  readonly dreamCar: InputMaybe<SortOrderEnum>;
  readonly employeeId: InputMaybe<SortOrderEnum>;
  readonly favFood: InputMaybe<SortOrderEnum>;
  readonly favMusic: InputMaybe<SortOrderEnum>;
  readonly favShow: InputMaybe<SortOrderEnum>;
  readonly firstCar: InputMaybe<SortOrderEnum>;
  readonly firstName: InputMaybe<SortOrderEnum>;
  readonly gender: InputMaybe<SortOrderEnum>;
  readonly homeTown: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SanityImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jobDescription: InputMaybe<SortOrderEnum>;
  readonly languages: InputMaybe<SanityTagSortInput>;
  readonly lastBook: InputMaybe<SortOrderEnum>;
  readonly lastName: InputMaybe<SortOrderEnum>;
  readonly location: InputMaybe<SanityLocationSortInput>;
  readonly locationCode: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly personalEmail: InputMaybe<SortOrderEnum>;
  readonly personalPhoneNumber: InputMaybe<SortOrderEnum>;
  readonly photoURL: InputMaybe<SortOrderEnum>;
  readonly pineappleOnPizza: InputMaybe<SortOrderEnum>;
  readonly placeToTravel: InputMaybe<SortOrderEnum>;
  readonly preferredName: InputMaybe<SortOrderEnum>;
  readonly shirtSize: InputMaybe<SortOrderEnum>;
  readonly visibleOnSite: InputMaybe<SortOrderEnum>;
  readonly workEmail: InputMaybe<SortOrderEnum>;
  readonly workPhoneNumber: InputMaybe<SortOrderEnum>;
};

type SanityStaffVisibilityAndPriority = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawCorporateVisibilityPriority: Maybe<Scalars['JSON']>;
  readonly _rawVisibilityPriority: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly corporate_visibility_priority: Maybe<ReadonlyArray<Maybe<SanityStaffVisibilityPopup>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly visibility_priority: Maybe<ReadonlyArray<Maybe<SanityStaffVisibilityPopup>>>;
};


type SanityStaffVisibilityAndPriority__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityStaffVisibilityAndPriority__rawCorporateVisibilityPriorityArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityStaffVisibilityAndPriority__rawVisibilityPriorityArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityStaffVisibilityAndPriority__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityStaffVisibilityAndPriorityConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityStaffVisibilityAndPriorityEdge>;
  readonly group: ReadonlyArray<SanityStaffVisibilityAndPriorityGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityStaffVisibilityAndPriority>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityStaffVisibilityAndPriorityConnection_distinctArgs = {
  field: SanityStaffVisibilityAndPriorityFieldSelector;
};


type SanityStaffVisibilityAndPriorityConnection_groupArgs = {
  field: SanityStaffVisibilityAndPriorityFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityStaffVisibilityAndPriorityConnection_maxArgs = {
  field: SanityStaffVisibilityAndPriorityFieldSelector;
};


type SanityStaffVisibilityAndPriorityConnection_minArgs = {
  field: SanityStaffVisibilityAndPriorityFieldSelector;
};


type SanityStaffVisibilityAndPriorityConnection_sumArgs = {
  field: SanityStaffVisibilityAndPriorityFieldSelector;
};

type SanityStaffVisibilityAndPriorityEdge = {
  readonly next: Maybe<SanityStaffVisibilityAndPriority>;
  readonly node: SanityStaffVisibilityAndPriority;
  readonly previous: Maybe<SanityStaffVisibilityAndPriority>;
};

type SanityStaffVisibilityAndPriorityFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawCorporateVisibilityPriority: InputMaybe<FieldSelectorEnum>;
  readonly _rawVisibilityPriority: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly corporate_visibility_priority: InputMaybe<SanityStaffVisibilityPopupFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly visibility_priority: InputMaybe<SanityStaffVisibilityPopupFieldSelector>;
};

type SanityStaffVisibilityAndPriorityFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawCorporateVisibilityPriority: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawVisibilityPriority: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly corporate_visibility_priority: InputMaybe<SanityStaffVisibilityPopupFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly visibility_priority: InputMaybe<SanityStaffVisibilityPopupFilterListInput>;
};

type SanityStaffVisibilityAndPriorityGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityStaffVisibilityAndPriorityEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityStaffVisibilityAndPriorityGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityStaffVisibilityAndPriority>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityStaffVisibilityAndPriorityGroupConnection_distinctArgs = {
  field: SanityStaffVisibilityAndPriorityFieldSelector;
};


type SanityStaffVisibilityAndPriorityGroupConnection_groupArgs = {
  field: SanityStaffVisibilityAndPriorityFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityStaffVisibilityAndPriorityGroupConnection_maxArgs = {
  field: SanityStaffVisibilityAndPriorityFieldSelector;
};


type SanityStaffVisibilityAndPriorityGroupConnection_minArgs = {
  field: SanityStaffVisibilityAndPriorityFieldSelector;
};


type SanityStaffVisibilityAndPriorityGroupConnection_sumArgs = {
  field: SanityStaffVisibilityAndPriorityFieldSelector;
};

type SanityStaffVisibilityAndPrioritySortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawCorporateVisibilityPriority: InputMaybe<SortOrderEnum>;
  readonly _rawVisibilityPriority: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly corporate_visibility_priority: InputMaybe<SanityStaffVisibilityPopupSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly visibility_priority: InputMaybe<SanityStaffVisibilityPopupSortInput>;
};

type SanityStaffVisibilityPopup = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly position: Maybe<Scalars['String']>;
  readonly visible: Maybe<Scalars['Boolean']>;
};

type SanityStaffVisibilityPopupFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly position: InputMaybe<FieldSelectorEnum>;
  readonly visible: InputMaybe<FieldSelectorEnum>;
};

type SanityStaffVisibilityPopupFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly position: InputMaybe<StringQueryOperatorInput>;
  readonly visible: InputMaybe<BooleanQueryOperatorInput>;
};

type SanityStaffVisibilityPopupFilterListInput = {
  readonly elemMatch: InputMaybe<SanityStaffVisibilityPopupFilterInput>;
};

type SanityStaffVisibilityPopupSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly position: InputMaybe<SortOrderEnum>;
  readonly visible: InputMaybe<SortOrderEnum>;
};

type SanityTable = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawRows: Maybe<Scalars['JSON']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly rows: Maybe<ReadonlyArray<Maybe<SanityTableRow>>>;
};


type SanityTable__rawRowsArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};

type SanityTableRow = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly cells: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
};

type SanityTag = {
  readonly _key: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly label: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type SanityTagFieldSelector = {
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type SanityTagFilterInput = {
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type SanityTagFilterListInput = {
  readonly elemMatch: InputMaybe<SanityTagFilterInput>;
};

type SanityTagSortInput = {
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly label: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type SanityVehicle = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawAttributes: Maybe<Scalars['JSON']>;
  readonly _rawBrand: Maybe<Scalars['JSON']>;
  readonly _rawBrandAudio: Maybe<Scalars['JSON']>;
  readonly _rawBrandTrim: Maybe<Scalars['JSON']>;
  readonly _rawFeatures: Maybe<Scalars['JSON']>;
  readonly _rawImages: Maybe<Scalars['JSON']>;
  readonly _rawLocation: Maybe<Scalars['JSON']>;
  readonly _rawModelOverride: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly attributes: Maybe<ReadonlyArray<Maybe<SanityAttribute>>>;
  readonly body: Maybe<Scalars['String']>;
  readonly brand: Maybe<SanityBrand>;
  readonly brand_audio: Maybe<SanityBrand>;
  readonly brand_trim: Maybe<SanityBrand>;
  readonly cab_type: Maybe<Scalars['String']>;
  readonly cdn_images_array: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly certification: Maybe<Scalars['String']>;
  readonly certified: Maybe<Scalars['Boolean']>;
  readonly children: ReadonlyArray<Node>;
  readonly colour_ext: Maybe<Scalars['String']>;
  readonly colour_ext_code: Maybe<Scalars['String']>;
  readonly colour_ext_hex: Maybe<Scalars['String']>;
  readonly colour_ext_original: Maybe<Scalars['String']>;
  readonly colour_int: Maybe<Scalars['String']>;
  readonly colour_int_code: Maybe<Scalars['String']>;
  readonly colour_int_hex: Maybe<Scalars['String']>;
  readonly colour_int_original: Maybe<Scalars['String']>;
  readonly cylinders: Maybe<Scalars['Float']>;
  readonly date_added: Maybe<Scalars['Date']>;
  readonly date_on_lot: Maybe<Scalars['String']>;
  readonly date_updated: Maybe<Scalars['Date']>;
  readonly displacement: Maybe<Scalars['String']>;
  readonly doors: Maybe<Scalars['Float']>;
  readonly drivetrain: Maybe<Scalars['String']>;
  readonly features: Maybe<ReadonlyArray<Maybe<SanityFeature>>>;
  readonly fuel_type: Maybe<Scalars['String']>;
  readonly had_one_owner: Maybe<Scalars['Boolean']>;
  readonly has_android_auto: Maybe<Scalars['Boolean']>;
  readonly has_apple_carplay: Maybe<Scalars['Boolean']>;
  readonly has_awd: Maybe<Scalars['Boolean']>;
  readonly has_backup_camera: Maybe<Scalars['Boolean']>;
  readonly has_blind_spot_monitor: Maybe<Scalars['Boolean']>;
  readonly has_bluetooth: Maybe<Scalars['Boolean']>;
  readonly has_cloth_seats: Maybe<Scalars['Boolean']>;
  readonly has_cooled_seats: Maybe<Scalars['Boolean']>;
  readonly has_cross_traffic_detect: Maybe<Scalars['Boolean']>;
  readonly has_cruise_control: Maybe<Scalars['Boolean']>;
  readonly has_fog_lights: Maybe<Scalars['Boolean']>;
  readonly has_folding_seats: Maybe<Scalars['Boolean']>;
  readonly has_handsfree_liftgate: Maybe<Scalars['Boolean']>;
  readonly has_heated_rear_seats: Maybe<Scalars['Boolean']>;
  readonly has_heated_seats: Maybe<Scalars['Boolean']>;
  readonly has_heated_steering: Maybe<Scalars['Boolean']>;
  readonly has_images: Maybe<Scalars['Boolean']>;
  readonly has_keyless_entry: Maybe<Scalars['Boolean']>;
  readonly has_lane_assist: Maybe<Scalars['Boolean']>;
  readonly has_leather_seats: Maybe<Scalars['Boolean']>;
  readonly has_luxury_package: Maybe<Scalars['Boolean']>;
  readonly has_massage: Maybe<Scalars['Boolean']>;
  readonly has_memory_seats: Maybe<Scalars['Boolean']>;
  readonly has_moonroof: Maybe<Scalars['Boolean']>;
  readonly has_navigation: Maybe<Scalars['Boolean']>;
  readonly has_panoramic_roof: Maybe<Scalars['Boolean']>;
  readonly has_power_seats: Maybe<Scalars['Boolean']>;
  readonly has_pre_collision: Maybe<Scalars['Boolean']>;
  readonly has_premium_audio: Maybe<Scalars['Boolean']>;
  readonly has_premium_package: Maybe<Scalars['Boolean']>;
  readonly has_push_start: Maybe<Scalars['Boolean']>;
  readonly has_rain_wipers: Maybe<Scalars['Boolean']>;
  readonly has_rear_ac: Maybe<Scalars['Boolean']>;
  readonly has_roof_crossbars: Maybe<Scalars['Boolean']>;
  readonly has_roof_racks: Maybe<Scalars['Boolean']>;
  readonly has_roof_rails: Maybe<Scalars['Boolean']>;
  readonly has_satellite_radio: Maybe<Scalars['Boolean']>;
  readonly has_self_driving: Maybe<Scalars['Boolean']>;
  readonly has_spare_tire: Maybe<Scalars['Boolean']>;
  readonly has_sport_package: Maybe<Scalars['Boolean']>;
  readonly has_sunroof: Maybe<Scalars['Boolean']>;
  readonly has_tech_package: Maybe<Scalars['Boolean']>;
  readonly has_tow_package: Maybe<Scalars['Boolean']>;
  readonly has_traction_control: Maybe<Scalars['Boolean']>;
  readonly has_ultimate_package: Maybe<Scalars['Boolean']>;
  readonly has_usb: Maybe<Scalars['Boolean']>;
  readonly has_usbc: Maybe<Scalars['Boolean']>;
  readonly has_vdp: Maybe<Scalars['Boolean']>;
  readonly has_wifi_hotspot: Maybe<Scalars['Boolean']>;
  readonly id: Scalars['ID'];
  readonly image_count: Maybe<Scalars['Float']>;
  readonly images: Maybe<ReadonlyArray<Maybe<SanityImage>>>;
  readonly images_array: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly internal: Internal;
  readonly is_delivered: Maybe<Scalars['Boolean']>;
  readonly is_diesel: Maybe<Scalars['Boolean']>;
  readonly is_electric: Maybe<Scalars['Boolean']>;
  readonly is_gasoline: Maybe<Scalars['Boolean']>;
  readonly is_hidden: Maybe<Scalars['Boolean']>;
  readonly is_hybrid: Maybe<Scalars['Boolean']>;
  readonly is_image_transformed: Maybe<Scalars['Boolean']>;
  readonly is_in_active_deal: Maybe<Scalars['Boolean']>;
  readonly is_in_transit: Maybe<Scalars['Boolean']>;
  readonly is_inspected: Maybe<Scalars['Boolean']>;
  readonly is_loaded: Maybe<Scalars['Boolean']>;
  readonly is_low_mileage: Maybe<Scalars['Boolean']>;
  readonly is_low_mileage_per_year: Maybe<Scalars['Boolean']>;
  readonly is_new_arrival: Maybe<Scalars['Boolean']>;
  readonly is_on_hand: Maybe<Scalars['Boolean']>;
  readonly is_out_for_delivery: Maybe<Scalars['Boolean']>;
  readonly is_reserved: Maybe<Scalars['Boolean']>;
  readonly is_safety_pick: Maybe<Scalars['Boolean']>;
  readonly is_sold: Maybe<Scalars['Boolean']>;
  readonly is_titled: Maybe<Scalars['Boolean']>;
  readonly is_transferred: Maybe<Scalars['Boolean']>;
  readonly is_ulev: Maybe<Scalars['Boolean']>;
  readonly latest_day_on_lot: Maybe<Scalars['String']>;
  readonly listing: Maybe<Scalars['String']>;
  readonly listing_type: Maybe<Scalars['String']>;
  readonly location: Maybe<SanityLocation>;
  readonly make: Maybe<Scalars['String']>;
  readonly metadata: Maybe<Scalars['String']>;
  readonly model: Maybe<Scalars['String']>;
  readonly model_override: Maybe<SanityModel>;
  readonly mpg_city: Maybe<Scalars['Float']>;
  readonly mpg_highway: Maybe<Scalars['Float']>;
  readonly odometer_km: Maybe<Scalars['Float']>;
  readonly odometer_mi: Maybe<Scalars['Float']>;
  readonly oem_code: Maybe<Scalars['String']>;
  readonly option_codes: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly per_litre_city: Maybe<Scalars['Float']>;
  readonly per_litre_hwy: Maybe<Scalars['Float']>;
  readonly price: Maybe<Scalars['Float']>;
  readonly price_bottom: Maybe<Scalars['Float']>;
  readonly price_msrp: Maybe<Scalars['Float']>;
  readonly price_other: Maybe<Scalars['Float']>;
  readonly price_rebates_guaranteed: Maybe<Scalars['Float']>;
  readonly price_rebates_optional: Maybe<Scalars['Float']>;
  readonly price_rebates_total: Maybe<Scalars['Float']>;
  readonly price_wholesale: Maybe<Scalars['Float']>;
  readonly sold_in_days: Maybe<Scalars['String']>;
  readonly stock_images: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly stock_number: Maybe<Scalars['String']>;
  readonly transmission: Maybe<Scalars['String']>;
  readonly trim: Maybe<Scalars['String']>;
  readonly trim_detail: Maybe<Scalars['String']>;
  readonly vauto_description: Maybe<Scalars['String']>;
  readonly vauto_features: Maybe<Scalars['String']>;
  readonly vauto_photos: Maybe<Scalars['String']>;
  readonly vauto_rooftop: Maybe<Scalars['String']>;
  readonly vauto_tags: Maybe<Scalars['String']>;
  readonly vauto_vdp_url: Maybe<Scalars['String']>;
  readonly vin: Maybe<Scalars['String']>;
  readonly year: Maybe<Scalars['Float']>;
};


type SanityVehicle__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityVehicle__rawAttributesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityVehicle__rawBrandArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityVehicle__rawBrandAudioArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityVehicle__rawBrandTrimArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityVehicle__rawFeaturesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityVehicle__rawImagesArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityVehicle__rawLocationArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityVehicle__rawModelOverrideArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityVehicle__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityVehicle_date_addedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityVehicle_date_updatedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityVehicleConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityVehicleEdge>;
  readonly group: ReadonlyArray<SanityVehicleGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityVehicle>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityVehicleConnection_distinctArgs = {
  field: SanityVehicleFieldSelector;
};


type SanityVehicleConnection_groupArgs = {
  field: SanityVehicleFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityVehicleConnection_maxArgs = {
  field: SanityVehicleFieldSelector;
};


type SanityVehicleConnection_minArgs = {
  field: SanityVehicleFieldSelector;
};


type SanityVehicleConnection_sumArgs = {
  field: SanityVehicleFieldSelector;
};

type SanityVehicleEdge = {
  readonly next: Maybe<SanityVehicle>;
  readonly node: SanityVehicle;
  readonly previous: Maybe<SanityVehicle>;
};

type SanityVehicleFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawAttributes: InputMaybe<FieldSelectorEnum>;
  readonly _rawBrand: InputMaybe<FieldSelectorEnum>;
  readonly _rawBrandAudio: InputMaybe<FieldSelectorEnum>;
  readonly _rawBrandTrim: InputMaybe<FieldSelectorEnum>;
  readonly _rawFeatures: InputMaybe<FieldSelectorEnum>;
  readonly _rawImages: InputMaybe<FieldSelectorEnum>;
  readonly _rawLocation: InputMaybe<FieldSelectorEnum>;
  readonly _rawModelOverride: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly attributes: InputMaybe<SanityAttributeFieldSelector>;
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly brand: InputMaybe<SanityBrandFieldSelector>;
  readonly brand_audio: InputMaybe<SanityBrandFieldSelector>;
  readonly brand_trim: InputMaybe<SanityBrandFieldSelector>;
  readonly cab_type: InputMaybe<FieldSelectorEnum>;
  readonly cdn_images_array: InputMaybe<FieldSelectorEnum>;
  readonly certification: InputMaybe<FieldSelectorEnum>;
  readonly certified: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly colour_ext: InputMaybe<FieldSelectorEnum>;
  readonly colour_ext_code: InputMaybe<FieldSelectorEnum>;
  readonly colour_ext_hex: InputMaybe<FieldSelectorEnum>;
  readonly colour_ext_original: InputMaybe<FieldSelectorEnum>;
  readonly colour_int: InputMaybe<FieldSelectorEnum>;
  readonly colour_int_code: InputMaybe<FieldSelectorEnum>;
  readonly colour_int_hex: InputMaybe<FieldSelectorEnum>;
  readonly colour_int_original: InputMaybe<FieldSelectorEnum>;
  readonly cylinders: InputMaybe<FieldSelectorEnum>;
  readonly date_added: InputMaybe<FieldSelectorEnum>;
  readonly date_on_lot: InputMaybe<FieldSelectorEnum>;
  readonly date_updated: InputMaybe<FieldSelectorEnum>;
  readonly displacement: InputMaybe<FieldSelectorEnum>;
  readonly doors: InputMaybe<FieldSelectorEnum>;
  readonly drivetrain: InputMaybe<FieldSelectorEnum>;
  readonly features: InputMaybe<SanityFeatureFieldSelector>;
  readonly fuel_type: InputMaybe<FieldSelectorEnum>;
  readonly had_one_owner: InputMaybe<FieldSelectorEnum>;
  readonly has_android_auto: InputMaybe<FieldSelectorEnum>;
  readonly has_apple_carplay: InputMaybe<FieldSelectorEnum>;
  readonly has_awd: InputMaybe<FieldSelectorEnum>;
  readonly has_backup_camera: InputMaybe<FieldSelectorEnum>;
  readonly has_blind_spot_monitor: InputMaybe<FieldSelectorEnum>;
  readonly has_bluetooth: InputMaybe<FieldSelectorEnum>;
  readonly has_cloth_seats: InputMaybe<FieldSelectorEnum>;
  readonly has_cooled_seats: InputMaybe<FieldSelectorEnum>;
  readonly has_cross_traffic_detect: InputMaybe<FieldSelectorEnum>;
  readonly has_cruise_control: InputMaybe<FieldSelectorEnum>;
  readonly has_fog_lights: InputMaybe<FieldSelectorEnum>;
  readonly has_folding_seats: InputMaybe<FieldSelectorEnum>;
  readonly has_handsfree_liftgate: InputMaybe<FieldSelectorEnum>;
  readonly has_heated_rear_seats: InputMaybe<FieldSelectorEnum>;
  readonly has_heated_seats: InputMaybe<FieldSelectorEnum>;
  readonly has_heated_steering: InputMaybe<FieldSelectorEnum>;
  readonly has_images: InputMaybe<FieldSelectorEnum>;
  readonly has_keyless_entry: InputMaybe<FieldSelectorEnum>;
  readonly has_lane_assist: InputMaybe<FieldSelectorEnum>;
  readonly has_leather_seats: InputMaybe<FieldSelectorEnum>;
  readonly has_luxury_package: InputMaybe<FieldSelectorEnum>;
  readonly has_massage: InputMaybe<FieldSelectorEnum>;
  readonly has_memory_seats: InputMaybe<FieldSelectorEnum>;
  readonly has_moonroof: InputMaybe<FieldSelectorEnum>;
  readonly has_navigation: InputMaybe<FieldSelectorEnum>;
  readonly has_panoramic_roof: InputMaybe<FieldSelectorEnum>;
  readonly has_power_seats: InputMaybe<FieldSelectorEnum>;
  readonly has_pre_collision: InputMaybe<FieldSelectorEnum>;
  readonly has_premium_audio: InputMaybe<FieldSelectorEnum>;
  readonly has_premium_package: InputMaybe<FieldSelectorEnum>;
  readonly has_push_start: InputMaybe<FieldSelectorEnum>;
  readonly has_rain_wipers: InputMaybe<FieldSelectorEnum>;
  readonly has_rear_ac: InputMaybe<FieldSelectorEnum>;
  readonly has_roof_crossbars: InputMaybe<FieldSelectorEnum>;
  readonly has_roof_racks: InputMaybe<FieldSelectorEnum>;
  readonly has_roof_rails: InputMaybe<FieldSelectorEnum>;
  readonly has_satellite_radio: InputMaybe<FieldSelectorEnum>;
  readonly has_self_driving: InputMaybe<FieldSelectorEnum>;
  readonly has_spare_tire: InputMaybe<FieldSelectorEnum>;
  readonly has_sport_package: InputMaybe<FieldSelectorEnum>;
  readonly has_sunroof: InputMaybe<FieldSelectorEnum>;
  readonly has_tech_package: InputMaybe<FieldSelectorEnum>;
  readonly has_tow_package: InputMaybe<FieldSelectorEnum>;
  readonly has_traction_control: InputMaybe<FieldSelectorEnum>;
  readonly has_ultimate_package: InputMaybe<FieldSelectorEnum>;
  readonly has_usb: InputMaybe<FieldSelectorEnum>;
  readonly has_usbc: InputMaybe<FieldSelectorEnum>;
  readonly has_vdp: InputMaybe<FieldSelectorEnum>;
  readonly has_wifi_hotspot: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image_count: InputMaybe<FieldSelectorEnum>;
  readonly images: InputMaybe<SanityImageFieldSelector>;
  readonly images_array: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly is_delivered: InputMaybe<FieldSelectorEnum>;
  readonly is_diesel: InputMaybe<FieldSelectorEnum>;
  readonly is_electric: InputMaybe<FieldSelectorEnum>;
  readonly is_gasoline: InputMaybe<FieldSelectorEnum>;
  readonly is_hidden: InputMaybe<FieldSelectorEnum>;
  readonly is_hybrid: InputMaybe<FieldSelectorEnum>;
  readonly is_image_transformed: InputMaybe<FieldSelectorEnum>;
  readonly is_in_active_deal: InputMaybe<FieldSelectorEnum>;
  readonly is_in_transit: InputMaybe<FieldSelectorEnum>;
  readonly is_inspected: InputMaybe<FieldSelectorEnum>;
  readonly is_loaded: InputMaybe<FieldSelectorEnum>;
  readonly is_low_mileage: InputMaybe<FieldSelectorEnum>;
  readonly is_low_mileage_per_year: InputMaybe<FieldSelectorEnum>;
  readonly is_new_arrival: InputMaybe<FieldSelectorEnum>;
  readonly is_on_hand: InputMaybe<FieldSelectorEnum>;
  readonly is_out_for_delivery: InputMaybe<FieldSelectorEnum>;
  readonly is_reserved: InputMaybe<FieldSelectorEnum>;
  readonly is_safety_pick: InputMaybe<FieldSelectorEnum>;
  readonly is_sold: InputMaybe<FieldSelectorEnum>;
  readonly is_titled: InputMaybe<FieldSelectorEnum>;
  readonly is_transferred: InputMaybe<FieldSelectorEnum>;
  readonly is_ulev: InputMaybe<FieldSelectorEnum>;
  readonly latest_day_on_lot: InputMaybe<FieldSelectorEnum>;
  readonly listing: InputMaybe<FieldSelectorEnum>;
  readonly listing_type: InputMaybe<FieldSelectorEnum>;
  readonly location: InputMaybe<SanityLocationFieldSelector>;
  readonly make: InputMaybe<FieldSelectorEnum>;
  readonly metadata: InputMaybe<FieldSelectorEnum>;
  readonly model: InputMaybe<FieldSelectorEnum>;
  readonly model_override: InputMaybe<SanityModelFieldSelector>;
  readonly mpg_city: InputMaybe<FieldSelectorEnum>;
  readonly mpg_highway: InputMaybe<FieldSelectorEnum>;
  readonly odometer_km: InputMaybe<FieldSelectorEnum>;
  readonly odometer_mi: InputMaybe<FieldSelectorEnum>;
  readonly oem_code: InputMaybe<FieldSelectorEnum>;
  readonly option_codes: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly per_litre_city: InputMaybe<FieldSelectorEnum>;
  readonly per_litre_hwy: InputMaybe<FieldSelectorEnum>;
  readonly price: InputMaybe<FieldSelectorEnum>;
  readonly price_bottom: InputMaybe<FieldSelectorEnum>;
  readonly price_msrp: InputMaybe<FieldSelectorEnum>;
  readonly price_other: InputMaybe<FieldSelectorEnum>;
  readonly price_rebates_guaranteed: InputMaybe<FieldSelectorEnum>;
  readonly price_rebates_optional: InputMaybe<FieldSelectorEnum>;
  readonly price_rebates_total: InputMaybe<FieldSelectorEnum>;
  readonly price_wholesale: InputMaybe<FieldSelectorEnum>;
  readonly sold_in_days: InputMaybe<FieldSelectorEnum>;
  readonly stock_images: InputMaybe<FieldSelectorEnum>;
  readonly stock_number: InputMaybe<FieldSelectorEnum>;
  readonly transmission: InputMaybe<FieldSelectorEnum>;
  readonly trim: InputMaybe<FieldSelectorEnum>;
  readonly trim_detail: InputMaybe<FieldSelectorEnum>;
  readonly vauto_description: InputMaybe<FieldSelectorEnum>;
  readonly vauto_features: InputMaybe<FieldSelectorEnum>;
  readonly vauto_photos: InputMaybe<FieldSelectorEnum>;
  readonly vauto_rooftop: InputMaybe<FieldSelectorEnum>;
  readonly vauto_tags: InputMaybe<FieldSelectorEnum>;
  readonly vauto_vdp_url: InputMaybe<FieldSelectorEnum>;
  readonly vin: InputMaybe<FieldSelectorEnum>;
  readonly year: InputMaybe<FieldSelectorEnum>;
};

type SanityVehicleFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawAttributes: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawBrand: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawBrandAudio: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawBrandTrim: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawFeatures: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawImages: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawLocation: InputMaybe<JSONQueryOperatorInput>;
  readonly _rawModelOverride: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly attributes: InputMaybe<SanityAttributeFilterListInput>;
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly brand: InputMaybe<SanityBrandFilterInput>;
  readonly brand_audio: InputMaybe<SanityBrandFilterInput>;
  readonly brand_trim: InputMaybe<SanityBrandFilterInput>;
  readonly cab_type: InputMaybe<StringQueryOperatorInput>;
  readonly cdn_images_array: InputMaybe<StringQueryOperatorInput>;
  readonly certification: InputMaybe<StringQueryOperatorInput>;
  readonly certified: InputMaybe<BooleanQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly colour_ext: InputMaybe<StringQueryOperatorInput>;
  readonly colour_ext_code: InputMaybe<StringQueryOperatorInput>;
  readonly colour_ext_hex: InputMaybe<StringQueryOperatorInput>;
  readonly colour_ext_original: InputMaybe<StringQueryOperatorInput>;
  readonly colour_int: InputMaybe<StringQueryOperatorInput>;
  readonly colour_int_code: InputMaybe<StringQueryOperatorInput>;
  readonly colour_int_hex: InputMaybe<StringQueryOperatorInput>;
  readonly colour_int_original: InputMaybe<StringQueryOperatorInput>;
  readonly cylinders: InputMaybe<FloatQueryOperatorInput>;
  readonly date_added: InputMaybe<DateQueryOperatorInput>;
  readonly date_on_lot: InputMaybe<StringQueryOperatorInput>;
  readonly date_updated: InputMaybe<DateQueryOperatorInput>;
  readonly displacement: InputMaybe<StringQueryOperatorInput>;
  readonly doors: InputMaybe<FloatQueryOperatorInput>;
  readonly drivetrain: InputMaybe<StringQueryOperatorInput>;
  readonly features: InputMaybe<SanityFeatureFilterListInput>;
  readonly fuel_type: InputMaybe<StringQueryOperatorInput>;
  readonly had_one_owner: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_android_auto: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_apple_carplay: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_awd: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_backup_camera: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_blind_spot_monitor: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_bluetooth: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_cloth_seats: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_cooled_seats: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_cross_traffic_detect: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_cruise_control: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_fog_lights: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_folding_seats: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_handsfree_liftgate: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_heated_rear_seats: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_heated_seats: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_heated_steering: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_images: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_keyless_entry: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_lane_assist: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_leather_seats: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_luxury_package: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_massage: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_memory_seats: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_moonroof: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_navigation: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_panoramic_roof: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_power_seats: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_pre_collision: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_premium_audio: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_premium_package: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_push_start: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_rain_wipers: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_rear_ac: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_roof_crossbars: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_roof_racks: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_roof_rails: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_satellite_radio: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_self_driving: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_spare_tire: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_sport_package: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_sunroof: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_tech_package: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_tow_package: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_traction_control: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_ultimate_package: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_usb: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_usbc: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_vdp: InputMaybe<BooleanQueryOperatorInput>;
  readonly has_wifi_hotspot: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image_count: InputMaybe<FloatQueryOperatorInput>;
  readonly images: InputMaybe<SanityImageFilterListInput>;
  readonly images_array: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly is_delivered: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_diesel: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_electric: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_gasoline: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_hidden: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_hybrid: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_image_transformed: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_in_active_deal: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_in_transit: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_inspected: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_loaded: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_low_mileage: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_low_mileage_per_year: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_new_arrival: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_on_hand: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_out_for_delivery: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_reserved: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_safety_pick: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_sold: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_titled: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_transferred: InputMaybe<BooleanQueryOperatorInput>;
  readonly is_ulev: InputMaybe<BooleanQueryOperatorInput>;
  readonly latest_day_on_lot: InputMaybe<StringQueryOperatorInput>;
  readonly listing: InputMaybe<StringQueryOperatorInput>;
  readonly listing_type: InputMaybe<StringQueryOperatorInput>;
  readonly location: InputMaybe<SanityLocationFilterInput>;
  readonly make: InputMaybe<StringQueryOperatorInput>;
  readonly metadata: InputMaybe<StringQueryOperatorInput>;
  readonly model: InputMaybe<StringQueryOperatorInput>;
  readonly model_override: InputMaybe<SanityModelFilterInput>;
  readonly mpg_city: InputMaybe<FloatQueryOperatorInput>;
  readonly mpg_highway: InputMaybe<FloatQueryOperatorInput>;
  readonly odometer_km: InputMaybe<FloatQueryOperatorInput>;
  readonly odometer_mi: InputMaybe<FloatQueryOperatorInput>;
  readonly oem_code: InputMaybe<StringQueryOperatorInput>;
  readonly option_codes: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly per_litre_city: InputMaybe<FloatQueryOperatorInput>;
  readonly per_litre_hwy: InputMaybe<FloatQueryOperatorInput>;
  readonly price: InputMaybe<FloatQueryOperatorInput>;
  readonly price_bottom: InputMaybe<FloatQueryOperatorInput>;
  readonly price_msrp: InputMaybe<FloatQueryOperatorInput>;
  readonly price_other: InputMaybe<FloatQueryOperatorInput>;
  readonly price_rebates_guaranteed: InputMaybe<FloatQueryOperatorInput>;
  readonly price_rebates_optional: InputMaybe<FloatQueryOperatorInput>;
  readonly price_rebates_total: InputMaybe<FloatQueryOperatorInput>;
  readonly price_wholesale: InputMaybe<FloatQueryOperatorInput>;
  readonly sold_in_days: InputMaybe<StringQueryOperatorInput>;
  readonly stock_images: InputMaybe<StringQueryOperatorInput>;
  readonly stock_number: InputMaybe<StringQueryOperatorInput>;
  readonly transmission: InputMaybe<StringQueryOperatorInput>;
  readonly trim: InputMaybe<StringQueryOperatorInput>;
  readonly trim_detail: InputMaybe<StringQueryOperatorInput>;
  readonly vauto_description: InputMaybe<StringQueryOperatorInput>;
  readonly vauto_features: InputMaybe<StringQueryOperatorInput>;
  readonly vauto_photos: InputMaybe<StringQueryOperatorInput>;
  readonly vauto_rooftop: InputMaybe<StringQueryOperatorInput>;
  readonly vauto_tags: InputMaybe<StringQueryOperatorInput>;
  readonly vauto_vdp_url: InputMaybe<StringQueryOperatorInput>;
  readonly vin: InputMaybe<StringQueryOperatorInput>;
  readonly year: InputMaybe<FloatQueryOperatorInput>;
};

type SanityVehicleGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityVehicleEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityVehicleGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityVehicle>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityVehicleGroupConnection_distinctArgs = {
  field: SanityVehicleFieldSelector;
};


type SanityVehicleGroupConnection_groupArgs = {
  field: SanityVehicleFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityVehicleGroupConnection_maxArgs = {
  field: SanityVehicleFieldSelector;
};


type SanityVehicleGroupConnection_minArgs = {
  field: SanityVehicleFieldSelector;
};


type SanityVehicleGroupConnection_sumArgs = {
  field: SanityVehicleFieldSelector;
};

type SanityVehicleSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawAttributes: InputMaybe<SortOrderEnum>;
  readonly _rawBrand: InputMaybe<SortOrderEnum>;
  readonly _rawBrandAudio: InputMaybe<SortOrderEnum>;
  readonly _rawBrandTrim: InputMaybe<SortOrderEnum>;
  readonly _rawFeatures: InputMaybe<SortOrderEnum>;
  readonly _rawImages: InputMaybe<SortOrderEnum>;
  readonly _rawLocation: InputMaybe<SortOrderEnum>;
  readonly _rawModelOverride: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly attributes: InputMaybe<SanityAttributeSortInput>;
  readonly body: InputMaybe<SortOrderEnum>;
  readonly brand: InputMaybe<SanityBrandSortInput>;
  readonly brand_audio: InputMaybe<SanityBrandSortInput>;
  readonly brand_trim: InputMaybe<SanityBrandSortInput>;
  readonly cab_type: InputMaybe<SortOrderEnum>;
  readonly cdn_images_array: InputMaybe<SortOrderEnum>;
  readonly certification: InputMaybe<SortOrderEnum>;
  readonly certified: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly colour_ext: InputMaybe<SortOrderEnum>;
  readonly colour_ext_code: InputMaybe<SortOrderEnum>;
  readonly colour_ext_hex: InputMaybe<SortOrderEnum>;
  readonly colour_ext_original: InputMaybe<SortOrderEnum>;
  readonly colour_int: InputMaybe<SortOrderEnum>;
  readonly colour_int_code: InputMaybe<SortOrderEnum>;
  readonly colour_int_hex: InputMaybe<SortOrderEnum>;
  readonly colour_int_original: InputMaybe<SortOrderEnum>;
  readonly cylinders: InputMaybe<SortOrderEnum>;
  readonly date_added: InputMaybe<SortOrderEnum>;
  readonly date_on_lot: InputMaybe<SortOrderEnum>;
  readonly date_updated: InputMaybe<SortOrderEnum>;
  readonly displacement: InputMaybe<SortOrderEnum>;
  readonly doors: InputMaybe<SortOrderEnum>;
  readonly drivetrain: InputMaybe<SortOrderEnum>;
  readonly features: InputMaybe<SanityFeatureSortInput>;
  readonly fuel_type: InputMaybe<SortOrderEnum>;
  readonly had_one_owner: InputMaybe<SortOrderEnum>;
  readonly has_android_auto: InputMaybe<SortOrderEnum>;
  readonly has_apple_carplay: InputMaybe<SortOrderEnum>;
  readonly has_awd: InputMaybe<SortOrderEnum>;
  readonly has_backup_camera: InputMaybe<SortOrderEnum>;
  readonly has_blind_spot_monitor: InputMaybe<SortOrderEnum>;
  readonly has_bluetooth: InputMaybe<SortOrderEnum>;
  readonly has_cloth_seats: InputMaybe<SortOrderEnum>;
  readonly has_cooled_seats: InputMaybe<SortOrderEnum>;
  readonly has_cross_traffic_detect: InputMaybe<SortOrderEnum>;
  readonly has_cruise_control: InputMaybe<SortOrderEnum>;
  readonly has_fog_lights: InputMaybe<SortOrderEnum>;
  readonly has_folding_seats: InputMaybe<SortOrderEnum>;
  readonly has_handsfree_liftgate: InputMaybe<SortOrderEnum>;
  readonly has_heated_rear_seats: InputMaybe<SortOrderEnum>;
  readonly has_heated_seats: InputMaybe<SortOrderEnum>;
  readonly has_heated_steering: InputMaybe<SortOrderEnum>;
  readonly has_images: InputMaybe<SortOrderEnum>;
  readonly has_keyless_entry: InputMaybe<SortOrderEnum>;
  readonly has_lane_assist: InputMaybe<SortOrderEnum>;
  readonly has_leather_seats: InputMaybe<SortOrderEnum>;
  readonly has_luxury_package: InputMaybe<SortOrderEnum>;
  readonly has_massage: InputMaybe<SortOrderEnum>;
  readonly has_memory_seats: InputMaybe<SortOrderEnum>;
  readonly has_moonroof: InputMaybe<SortOrderEnum>;
  readonly has_navigation: InputMaybe<SortOrderEnum>;
  readonly has_panoramic_roof: InputMaybe<SortOrderEnum>;
  readonly has_power_seats: InputMaybe<SortOrderEnum>;
  readonly has_pre_collision: InputMaybe<SortOrderEnum>;
  readonly has_premium_audio: InputMaybe<SortOrderEnum>;
  readonly has_premium_package: InputMaybe<SortOrderEnum>;
  readonly has_push_start: InputMaybe<SortOrderEnum>;
  readonly has_rain_wipers: InputMaybe<SortOrderEnum>;
  readonly has_rear_ac: InputMaybe<SortOrderEnum>;
  readonly has_roof_crossbars: InputMaybe<SortOrderEnum>;
  readonly has_roof_racks: InputMaybe<SortOrderEnum>;
  readonly has_roof_rails: InputMaybe<SortOrderEnum>;
  readonly has_satellite_radio: InputMaybe<SortOrderEnum>;
  readonly has_self_driving: InputMaybe<SortOrderEnum>;
  readonly has_spare_tire: InputMaybe<SortOrderEnum>;
  readonly has_sport_package: InputMaybe<SortOrderEnum>;
  readonly has_sunroof: InputMaybe<SortOrderEnum>;
  readonly has_tech_package: InputMaybe<SortOrderEnum>;
  readonly has_tow_package: InputMaybe<SortOrderEnum>;
  readonly has_traction_control: InputMaybe<SortOrderEnum>;
  readonly has_ultimate_package: InputMaybe<SortOrderEnum>;
  readonly has_usb: InputMaybe<SortOrderEnum>;
  readonly has_usbc: InputMaybe<SortOrderEnum>;
  readonly has_vdp: InputMaybe<SortOrderEnum>;
  readonly has_wifi_hotspot: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image_count: InputMaybe<SortOrderEnum>;
  readonly images: InputMaybe<SanityImageSortInput>;
  readonly images_array: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly is_delivered: InputMaybe<SortOrderEnum>;
  readonly is_diesel: InputMaybe<SortOrderEnum>;
  readonly is_electric: InputMaybe<SortOrderEnum>;
  readonly is_gasoline: InputMaybe<SortOrderEnum>;
  readonly is_hidden: InputMaybe<SortOrderEnum>;
  readonly is_hybrid: InputMaybe<SortOrderEnum>;
  readonly is_image_transformed: InputMaybe<SortOrderEnum>;
  readonly is_in_active_deal: InputMaybe<SortOrderEnum>;
  readonly is_in_transit: InputMaybe<SortOrderEnum>;
  readonly is_inspected: InputMaybe<SortOrderEnum>;
  readonly is_loaded: InputMaybe<SortOrderEnum>;
  readonly is_low_mileage: InputMaybe<SortOrderEnum>;
  readonly is_low_mileage_per_year: InputMaybe<SortOrderEnum>;
  readonly is_new_arrival: InputMaybe<SortOrderEnum>;
  readonly is_on_hand: InputMaybe<SortOrderEnum>;
  readonly is_out_for_delivery: InputMaybe<SortOrderEnum>;
  readonly is_reserved: InputMaybe<SortOrderEnum>;
  readonly is_safety_pick: InputMaybe<SortOrderEnum>;
  readonly is_sold: InputMaybe<SortOrderEnum>;
  readonly is_titled: InputMaybe<SortOrderEnum>;
  readonly is_transferred: InputMaybe<SortOrderEnum>;
  readonly is_ulev: InputMaybe<SortOrderEnum>;
  readonly latest_day_on_lot: InputMaybe<SortOrderEnum>;
  readonly listing: InputMaybe<SortOrderEnum>;
  readonly listing_type: InputMaybe<SortOrderEnum>;
  readonly location: InputMaybe<SanityLocationSortInput>;
  readonly make: InputMaybe<SortOrderEnum>;
  readonly metadata: InputMaybe<SortOrderEnum>;
  readonly model: InputMaybe<SortOrderEnum>;
  readonly model_override: InputMaybe<SanityModelSortInput>;
  readonly mpg_city: InputMaybe<SortOrderEnum>;
  readonly mpg_highway: InputMaybe<SortOrderEnum>;
  readonly odometer_km: InputMaybe<SortOrderEnum>;
  readonly odometer_mi: InputMaybe<SortOrderEnum>;
  readonly oem_code: InputMaybe<SortOrderEnum>;
  readonly option_codes: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly per_litre_city: InputMaybe<SortOrderEnum>;
  readonly per_litre_hwy: InputMaybe<SortOrderEnum>;
  readonly price: InputMaybe<SortOrderEnum>;
  readonly price_bottom: InputMaybe<SortOrderEnum>;
  readonly price_msrp: InputMaybe<SortOrderEnum>;
  readonly price_other: InputMaybe<SortOrderEnum>;
  readonly price_rebates_guaranteed: InputMaybe<SortOrderEnum>;
  readonly price_rebates_optional: InputMaybe<SortOrderEnum>;
  readonly price_rebates_total: InputMaybe<SortOrderEnum>;
  readonly price_wholesale: InputMaybe<SortOrderEnum>;
  readonly sold_in_days: InputMaybe<SortOrderEnum>;
  readonly stock_images: InputMaybe<SortOrderEnum>;
  readonly stock_number: InputMaybe<SortOrderEnum>;
  readonly transmission: InputMaybe<SortOrderEnum>;
  readonly trim: InputMaybe<SortOrderEnum>;
  readonly trim_detail: InputMaybe<SortOrderEnum>;
  readonly vauto_description: InputMaybe<SortOrderEnum>;
  readonly vauto_features: InputMaybe<SortOrderEnum>;
  readonly vauto_photos: InputMaybe<SortOrderEnum>;
  readonly vauto_rooftop: InputMaybe<SortOrderEnum>;
  readonly vauto_tags: InputMaybe<SortOrderEnum>;
  readonly vauto_vdp_url: InputMaybe<SortOrderEnum>;
  readonly vin: InputMaybe<SortOrderEnum>;
  readonly year: InputMaybe<SortOrderEnum>;
};

type SanityVoucherDisclaimer = Node & SanityDocument & {
  readonly _createdAt: Maybe<Scalars['Date']>;
  readonly _id: Maybe<Scalars['String']>;
  readonly _key: Maybe<Scalars['String']>;
  readonly _rawDisclaimer: Maybe<Scalars['JSON']>;
  readonly _rev: Maybe<Scalars['String']>;
  readonly _type: Maybe<Scalars['String']>;
  readonly _updatedAt: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly disclaimer: Maybe<ReadonlyArray<Maybe<SanityBlock>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SanityVoucherDisclaimer__createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type SanityVoucherDisclaimer__rawDisclaimerArgs = {
  resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
};


type SanityVoucherDisclaimer__updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SanityVoucherDisclaimerConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityVoucherDisclaimerEdge>;
  readonly group: ReadonlyArray<SanityVoucherDisclaimerGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityVoucherDisclaimer>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityVoucherDisclaimerConnection_distinctArgs = {
  field: SanityVoucherDisclaimerFieldSelector;
};


type SanityVoucherDisclaimerConnection_groupArgs = {
  field: SanityVoucherDisclaimerFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityVoucherDisclaimerConnection_maxArgs = {
  field: SanityVoucherDisclaimerFieldSelector;
};


type SanityVoucherDisclaimerConnection_minArgs = {
  field: SanityVoucherDisclaimerFieldSelector;
};


type SanityVoucherDisclaimerConnection_sumArgs = {
  field: SanityVoucherDisclaimerFieldSelector;
};

type SanityVoucherDisclaimerEdge = {
  readonly next: Maybe<SanityVoucherDisclaimer>;
  readonly node: SanityVoucherDisclaimer;
  readonly previous: Maybe<SanityVoucherDisclaimer>;
};

type SanityVoucherDisclaimerFieldSelector = {
  readonly _createdAt: InputMaybe<FieldSelectorEnum>;
  readonly _id: InputMaybe<FieldSelectorEnum>;
  readonly _key: InputMaybe<FieldSelectorEnum>;
  readonly _rawDisclaimer: InputMaybe<FieldSelectorEnum>;
  readonly _rev: InputMaybe<FieldSelectorEnum>;
  readonly _type: InputMaybe<FieldSelectorEnum>;
  readonly _updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly disclaimer: InputMaybe<SanityBlockFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SanityVoucherDisclaimerFilterInput = {
  readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly _id: InputMaybe<StringQueryOperatorInput>;
  readonly _key: InputMaybe<StringQueryOperatorInput>;
  readonly _rawDisclaimer: InputMaybe<JSONQueryOperatorInput>;
  readonly _rev: InputMaybe<StringQueryOperatorInput>;
  readonly _type: InputMaybe<StringQueryOperatorInput>;
  readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly disclaimer: InputMaybe<SanityBlockFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SanityVoucherDisclaimerGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SanityVoucherDisclaimerEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SanityVoucherDisclaimerGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SanityVoucherDisclaimer>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SanityVoucherDisclaimerGroupConnection_distinctArgs = {
  field: SanityVoucherDisclaimerFieldSelector;
};


type SanityVoucherDisclaimerGroupConnection_groupArgs = {
  field: SanityVoucherDisclaimerFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SanityVoucherDisclaimerGroupConnection_maxArgs = {
  field: SanityVoucherDisclaimerFieldSelector;
};


type SanityVoucherDisclaimerGroupConnection_minArgs = {
  field: SanityVoucherDisclaimerFieldSelector;
};


type SanityVoucherDisclaimerGroupConnection_sumArgs = {
  field: SanityVoucherDisclaimerFieldSelector;
};

type SanityVoucherDisclaimerSortInput = {
  readonly _createdAt: InputMaybe<SortOrderEnum>;
  readonly _id: InputMaybe<SortOrderEnum>;
  readonly _key: InputMaybe<SortOrderEnum>;
  readonly _rawDisclaimer: InputMaybe<SortOrderEnum>;
  readonly _rev: InputMaybe<SortOrderEnum>;
  readonly _type: InputMaybe<SortOrderEnum>;
  readonly _updatedAt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly disclaimer: InputMaybe<SanityBlockSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly flags: Maybe<SiteFlags>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly flags: InputMaybe<SiteFlagsFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly flags: InputMaybe<SiteFlagsFilterInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFlags = {
  readonly DETECT_NODE_MUTATIONS: Maybe<Scalars['Boolean']>;
  readonly DEV_SSR: Maybe<Scalars['Boolean']>;
  readonly FAST_DEV: Maybe<Scalars['Boolean']>;
  readonly PARALLEL_SOURCING: Maybe<Scalars['Boolean']>;
  readonly PARTIAL_HYDRATION: Maybe<Scalars['Boolean']>;
};

type SiteFlagsFieldSelector = {
  readonly DETECT_NODE_MUTATIONS: InputMaybe<FieldSelectorEnum>;
  readonly DEV_SSR: InputMaybe<FieldSelectorEnum>;
  readonly FAST_DEV: InputMaybe<FieldSelectorEnum>;
  readonly PARALLEL_SOURCING: InputMaybe<FieldSelectorEnum>;
  readonly PARTIAL_HYDRATION: InputMaybe<FieldSelectorEnum>;
};

type SiteFlagsFilterInput = {
  readonly DETECT_NODE_MUTATIONS: InputMaybe<BooleanQueryOperatorInput>;
  readonly DEV_SSR: InputMaybe<BooleanQueryOperatorInput>;
  readonly FAST_DEV: InputMaybe<BooleanQueryOperatorInput>;
  readonly PARALLEL_SOURCING: InputMaybe<BooleanQueryOperatorInput>;
  readonly PARTIAL_HYDRATION: InputMaybe<BooleanQueryOperatorInput>;
};

type SiteFlagsSortInput = {
  readonly DETECT_NODE_MUTATIONS: InputMaybe<SortOrderEnum>;
  readonly DEV_SSR: InputMaybe<SortOrderEnum>;
  readonly FAST_DEV: InputMaybe<SortOrderEnum>;
  readonly PARALLEL_SOURCING: InputMaybe<SortOrderEnum>;
  readonly PARTIAL_HYDRATION: InputMaybe<SortOrderEnum>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly flags: InputMaybe<SiteFlagsSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };


}
